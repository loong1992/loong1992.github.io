{"meta":{"title":"从零到壹","subtitle":"从入门到入坑","description":"linux","author":"小龙","url":"https://zeroto.one"},"pages":[{"title":"关于","date":"2019-09-17T18:22:27.856Z","updated":"2019-09-17T18:22:27.856Z","comments":false,"path":"about/index.html","permalink":"https://zeroto.one/about/index.html","excerpt":"","text":"关于我​ 本人熟悉的技能主要有 PHP、Python、Linux 关于本站​ 本站源码放在bitbucket上，使用codeship自动化部署 (只需上传md文件到bitbucket即可)，同步发布在两个空间上，分别为netlify和github pages。两者择一访问即可，在大陆一般访问netlify空间速度较快（因为自带CDN，中国IP访问日本/新加坡线路）。 ​ 当前站点使用了基于node.js的HEXO静态博客框架，indigo主题。使用了imgur sm.ms图床。 yandex zoho的邮箱服务，评论为 来必力 Disqus（需科学-上-网），站点流量统计使用了google analytics(谷歌分析) 。"},{"title":"","date":"2019-09-17T18:22:27.856Z","updated":"2019-09-17T18:22:27.856Z","comments":false,"path":"categories/index.html","permalink":"https://zeroto.one/categories/index.html","excerpt":"","text":""},{"title":"","date":"2019-09-17T18:22:27.856Z","updated":"2019-09-17T18:22:27.856Z","comments":false,"path":"tags/index.html","permalink":"https://zeroto.one/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"WPS Office for Mac 免登录使用方法","slug":"wps_skip_login_macOS","date":"2019-04-21T23:04:05.000Z","updated":"2019-09-17T18:22:27.856Z","comments":true,"path":"2019/04/21/wps_skip_login_macOS/","link":"","permalink":"https://zeroto.one/2019/04/21/wps_skip_login_macOS/","excerpt":"WPS office 2019 mac版必须登录才可以使用, 以下方法不用登录(跳过登录)也可以使用","text":"WPS office 2019 mac版必须登录才可以使用, 以下方法不用登录(跳过登录)也可以使用 –2019-7月更新 在wps 1.3.1版可以不登录打开本地文档，只是有一些功能及设置不登录是用不了的，另外以下方法不保证能用在新版wps中（本人主力用iwork套件） wps 在 2019.04.19 发布了mac版office的正式版 1.0.1 wps官网但是必须登录, 不然强制退出程序. 经过测试把以下文件名改掉即可免登录使用:“kqingaccountsdk.framework”, 路径为 “Contents/Frameworks/office6” 提示: linux版按理说也可以改掉名字来达到同样效果(我没测试linux版) 以下为效果及详细图 版本 深色主题: 1 2 浅色主题: 3 详细步骤: 4 进入到该目录下, 改名 5 大功告成!","categories":[],"tags":[{"name":"office","slug":"office","permalink":"https://zeroto.one/tags/office/"}]},{"title":"旧文系列--LAMP环境源码安装详细步骤","slug":"LAMP_config","date":"2018-11-03T11:08:50.000Z","updated":"2019-09-17T18:22:27.856Z","comments":true,"path":"2018/11/03/LAMP_config/","link":"","permalink":"https://zeroto.one/2018/11/03/LAMP_config/","excerpt":"LAMP环境源码安装详细步骤 （CentOS6、Apache2.2、Mysql5.1、PHP5.2) 注: 本文由工具直接word转换为md, 没有做代码高亮等格式化处理, 观感较差.","text":"LAMP环境源码安装详细步骤 （CentOS6、Apache2.2、Mysql5.1、PHP5.2) 注: 本文由工具直接word转换为md, 没有做代码高亮等格式化处理, 观感较差. 一、准备工作⑴安装相关程序库yum install -y ntp libxml2 libxml2-devel openssl openssl-devel curl curl-devellibmcrypt flex bison libmcrypt-devel zlib libpng libpng-devel libjpeglibjpeg-devel libtiff-devel jpeg8 bzip2-devel freetype autoconf automake gd gccgcc-c++ gcc-g77 ncurses-devel libjpeg libjpeg-devel freetype-devel pam-develkerne ⑵设置系统同步好时间，使用crontab来定时的同步时间 vim /etc/crontab或crontab -e 然后加入以下行（每30分钟同步一次）： */30 * * * * ntpdate 0.asia.pool.ntp.org 防火墙放行 iptables -L 列出目前防火墙设置 iptables -F 清空防火墙规则 删除etc/sysconfig/下iptables和iptables.old文件 vi /etc/selinux/config SELINUX=disabled 关闭系统安全策略（永久，重启生效） getenforce 获取目前状态 setenforce 0 临时改（无需重启） 3.为防止出现乱码 i18n是internationalization的缩写，意思指i和n之间有18个字母。/etc/sysconfig/i18n里面存放着系统的区域语言设置，可以使linux系统支持国际化信息显示。 如果客户系统是繁体中文，也是如此操作。 vi /etc/sysconfig/i18n 注释以下句 #LANG=”en_US.UTF-8” #SYSFONT=”latarcyrheb-sun16” 添加以下句 LANG=”zh_CN.GB18030” LANGUAGE=”zh_CN.GB18030:zh_CN.GB2312:zh_CN” SUPPORTED=”zh_CN.UTF-8:zh_CN:zh:en_US.UTF-8:en_US:en” SYSFONT=”lat0-sun16” 编辑系统环境 vi /etc/profile 添加export LC_ALL=zh_CN.GB18030 保存退出，重新载入。 source /etc/profile 二.安装MySQL⑴下载并安装mysql添加mysql用户，添加用户组mysql ，将mysql用户默认组设置为mysql用户组： groupadd mysql useradd -s /sbin/nologin -g mysql -M mysql 先下载，后解压mysql，放在/home/soft目录下 cd /home/soft/mysql-5.1.61 编译mysql参数: ./configure –prefix=/usr/local/mysql –localstatedir=/home/db_mysql/data–sysconfdir=/etc –with-charset=utf8 –with-extra-charsets=all–enable-thread-safe-client –with-big-tables –with-ssl –with-embedded-server–enable-local-infile –enable-assembler –with-plugins=innobase–with-plugins=partition –with-plugins=myisammrg–with-unix-socket-path=/usr/local/mysql/mysql.sock –with-low-memory–with-readline make make install 若编译失败make clean后再make和make install 默认不支持innodb存储引擎，其中添加–with-plugins=all可以把innodb加载进来。 ⑵配置mysql生成MySQL配置文件 cp /usr/local/mysql/share/mysql/my-medium.cnf /etc/my.cnf vi /etc/my.cnf #修改mysql配置文件 把该文件改为或加上以下行 1.[client] default-character-set = utf8 2.[mysqld] character-set-server = utf8 collation-server = utf8_general_ci 注释掉(加#号）#skip-locking这一行（跳过外部锁定） 2.更改数据库拥有者，让mysql用户有所有权限 mkdir -p /home/db_mysql/data chown -R mysql:mysql /home/db_mysql/data chown -R mysql:mysql /usr/local/mysql 初始化数据库（创建授权表）： /usr/local/mysql/bin/mysql_install_db –user=mysql –datadir=/home/db_mysql/data–basedir=/usr/local/mysql 把启动脚本加入系统服务项： cp /usr/local/mysql/share/mysql/mysql.server /etc/init.d/mysqld chown root:root /etc/init.d/mysqld chmod 755 /etc/init.d/mysqld 修改启动脚本 vim /etc/init.d/mysqld 需要修改的地方有datadir=/home/db_mysql/data（前面初始化数据库时定义的目录） 设定开机启动 chkconfig –level 35 mysqld on （levels 35 表示在命令行模式和X Window模式下自动启动） 启动mysql命令：service mysqld start 3.设密码： 创建符号链接ln -s /usr/local/mysql/bin/mysqladmin /usr/bin/ 设置密码命令mysqladmin -u root password ‘a123456’ 上句为给mysql用户root加密码a123456 4.登录： 创建符号链接ln -s /usr/local/mysql/bin/mysql /usr/bin/ 登录命令mysql -u root -p 然后输密码。 5.退出：\\q或exit 三.安装apache⑴下载并安装apache安装GCC等组件（如果系统没有安装） 如果安装apache提示“no acceptable C compiler found in\\$PATH”，这是因为系统中没有安装gcc yum install -y gcc gcc-c++ ①下载apache，下载地址为：http://mirror.esocc.com/apache//httpd/httpd-2.2.31.tar.gz ②tar zxvf httpd-2.2.31.tar.gz ③cd httpd-2.2.31 ④编译 ./configure –prefix=/usr/local/httpd –enable-so –enable-mods-shared=most–with-mpm=worker –with-included-apr –enable-expires=shared–enable-deflate=shared –enable-rewrite=shared –enable-static-support–disable-userdir ⑤make &amp;&amp; make install ⑥apache安装完成后，进入/usr/local/httpd/bin/目录下，执行./apachectlstart命令启动apache ⑦centos本机访问http://127.0.0.1/页面查看apache服务是否安装正常。 ⑵设置apache开机启动cp /usr/local/httpd/bin/apachectl /etc/init.d/httpd vim /etc/init.d/httpd 编辑，在头部之下，添加一行，找到： #!/bin/sh # 此处添加以下行，保存退出。 # chkconfig: 2345 85 15 chkconfig –add httpd //添加开机启动 chkconfig httpd on chkconfig //检查是否开启 四.apache结合php⑴编辑apache的主配置文件vim /usr/local/httpd/conf/httpd.conf 找到： AddType application/x-gzip .gz .tgz 在该行下面添加： AddType application/x-httpd-php .php AddType application/x-httpd-php .php3 AddType application/x-httpd-php .php4 找到： \\ DirectoryIndex index.html \\&lt;/IfModule> 将该行改为 \\ DirectoryIndex index.html index.htm index.php \\&lt;/IfModule> 以下行修改路径及控制目录和文件的访问授权：如下设为允许所有 \\&lt;Directory “/usr/local/httpd/htdocs”> Options FollowSymLinks AllowOverride None Order allow,deny Allow from all \\&lt;/Directory> 找到 #ServerName www.example.com:80 在该行下面添加 ServerName localhost:80 找到： #Include conf/extra/httpd-mpm.conf #Include conf/extra/httpd-info.conf #Include conf/extra/httpd-vhosts.conf #Include conf/extra/httpd-default.conf 去掉前面的“#”号，取消注释。 注：以上 4个扩展配置文件中的设置请按照相关原则进行合理配置！修改完成后保存退出。 ⑵配置Apache的扩展配置文件配置apache的进程管理、默认设置以及虚拟主机 ①.配置Apache进程管理查看当前httpd的工作模式，可执行 /usr/local/httpd/bin/apachectl -l 进程管理模式共有三种：worker模式、prefork模式、Event模式 配置文件为：/usr/local/httpd/conf/extra/httpd-mpm.conf 将配置文件中下面一段修改为如下，worker工作模式例子与详解： \\ StartServers 2 //启动apache时，首次启动2个进程 MaxClients 150 //最多支持150个并发的http链接 MinSpareThreads 25 //最少有25个线程空闲，否则新增加进程或者线程了 MaxSpareThreads 75 //最多有75个线程空闲，否则就要自动回收多余空闲的线程或者进程 ThreadsPerChild 25 //启动一个进程时，此进程首先启动25个线程 MaxRequestsPerChild 1000//允许每个进程在它的生命周期内处理的http最大请求1000.。0为没有限制。（不建议设为0，可能内存溢出） \\&lt;/IfModule> 以下是例子配置 \\ ServerLimit 50 //最多可以启动50个进程 ThreadLimit 1000 //每个进程最多可以启动1000个线程 StartServers 8 MaxClients 5000 MinSpareThreads 750 MaxSpareThreads 2500 ThreadsPerChild 1000 MaxRequestsPerChild 20000 \\&lt;/IfModule> 指令说明（根据每台机的配置，设置对应的参数）： StartServers：设置服务器启动时建立的子进程数量。因为子进程数量动态的取决于负载的轻重,所有一般没有必要调整这个参数。 MaxClients：允许同时伺服的最大接入请求数量(最大线程数量)。任何超过MaxClients限制的请求都将进入等候队列。默认值是400，16(ServerLimit)乘以25(ThreadsPerChild)的结果。因此要增加MaxClients的时候，你必须同时增加ServerLimit的值。 ThreadsPerChild:每个子进程建立的常驻的执行线程数。默认值是25。子进程在启动时建立这些线程后就不再建立新的线程了。 MinSpareThreads:最小空闲线程数,默认值是75。这个MPM将基于整个服务器监视空闲线程数。如果服务器中总的空闲线程数太少，子进程将产生新的空闲线程。 MaxSpareThreads:设置最大空闲线程数。默认值是250。这个MPM将基于整个服务器监视空闲线程数。如果服务器中总的空闲线程数太多，子进程将杀死多余的空闲线程。MaxSpareThreads的取值范围是有限制的。Apache将按照如下限制自动修正你设置的值：worker要求其大于等于MinSpareThreads加上ThreadsPerChild的和。 MaxRequestsPerChild：设置每个子进程在其生存期内允许伺服的最大请求数量。到达MaxRequestsPerChild的限制后，子进程将会结束。如果MaxRequestsPerChild为0，子进程将永远不会结束。将MaxRequestsPerChild设置成非零值有两个好处： 1.可以防止(偶然的)内存泄漏无限进行，从而耗尽内存。 2.给进程一个有限寿命，从而有助于当服务器负载减轻的时候减少活动进程的数量。 注意对于KeepAlive链接，只有第一个请求会被计数。事实上，它改变了每个子进程限制最大链接数量的行为。 先计算每一个httpd请求大概占用多少内存，除去系统和其他程序占用的内存后，估计每秒请求数有多少，就可以计算出来了 ②.配置Apache虚拟主机配置文件为：/usr/local/httpd/conf/extra/httpd-vhosts.conf 将配置文件中下面一段修改为相应虚拟主机域名和相应目录，下例为改为www.test.org： \\ ServerAdmin webmaster\\@dummy-host2.localhost DocumentRoot “/home/www/test/“ ServerName www.test.org \\&lt;Directory “/home/www/test/“> Options FollowSymLinks AllowOverride All Order allow,deny Allow from all \\&lt;/Directory> \\&lt;/VirtualHost> 新建目录（改为上述的虚拟主机目录） mkdir -p /home/www/test/ 重启apache服务service httpd restart 如果想要在centos本机测试，用虚拟主机域名方式浏览，请编辑vi /etc/hosts文件加上： 127.0.0.1 www.test.org ③配置Apache服务器默认设置vi /usr/local/httpd/conf/extra/httpd-default.conf # 联机超过 60 秒失败就重试 Timeout 60 # 开启 KeepAlive KeepAlive Off # 设定同一时间可容许的 KeppAlive 量 MaxKeepAliveRequests 5000 # KeepAlive 多久要自动 Timeout 掉 KeepAliveTimeout 3 # 关掉那费时的 DNS 查寻 HostnameLookups Off 总结一下： 在内存非常充足的服务器上，不管是否关闭 KeepAlive功能，服务器性能不会有明显变化； 如果服务器内存较少，或者服务器有非常大量的文件系统访问时，或者主要处理动态网页服务，关闭KeepAlive后可以节省很多内存，而节省出来的内存用于文件系统Cache，可以提高文件系统访问的性能，并且系统会更加稳定。 补充： 关于是否应该关闭 KeepAlive选项，我觉得可以基于下面的一个公式来判断。 在理想的网络连接状况下，系统的Apache 进程数和内存使用可以用如下公式表达： HttpdProcessNumber = KeepAliveTimeout * TotalRequestPerSecond /Average(KeepAliveRequests) HttpdUsedMemory = HttpdProcessNumber * MemoryPerHttpdProcess 换成中文： 总Apache进程数 = KeepAliveTimeout * 每秒种HTTP请求数 / 平均KeepAlive请求 Apache占用内存 = 总Apache进程数 * 平均每进程占用内存数 需要特别说明的是： [平均KeepAlive请求] 数，是指每个用户连接上服务器后，持续发出的 HTTP请求数。当 KeepAliveTimeout 等 0 或者 KeepAlive 关闭时，KeepAliveTimeout不参与乘的运算从上面的公式看，如果 [每秒用户请求] 多，[KeepAliveTimeout]的值大，[平均KeepAlive请求] 的值小，都会造成 [Apache进程数] 多和 [内存]多，但是当 [平均KeepAlive请求] 的值越大时，[Apache进程数] 和 [内存]都是趋向于减少的。 基于上面的公式，我们就可以推算出当 平均KeepAlive请求 \\&lt;= KeepAliveTimeout时，关闭 KeepAlive 选项是划算的，否则就可以考虑打开。 Timeout：设置服务器在断定请求失败前等待的秒数。默认值300。 KeepAlive：设置是否启用HTTP持久链接，On 代表打开，Off代表关闭。如果用于同一页面包含大量静态文件的应用，设置为On，以提高性能；如果用于主要为动态页面的应用， 设置为Off，以节约内存资源；如果服务器前跑有squid或者其它七层设备，设置为On。 MaxKeepAliveRequests：限制当启用KeepAlive时，每个连接允许的请求数量。如果将此值设为”0”，将不限制请求的数目。笔者建议将此值设为100-500之间的一个值，以确保最优 的服务器性能。 KeepAliveTimeout：设置持久链接中服务器在两次请求之间等待的秒数。对于高负荷服务器来说，KeepAliveTimeout值较大会导致一些性能方面的问题：超时值越大，与空闲客户 端保持连接的进程就越多。 UseCanonicalName：配置服务器如何确定它自己的域名，可选值为On | Off |DNS。DNS用于为大量基于IP的虚拟主机支持那些古董级的不提供”Host:”头的浏览器使用。笔者建议 设置为Off。 AccessFileName：设置分布式配置文件的名字，默认为.htaccess。如果为某个目录启用了分布式配置文件功能，那么在向客户端返回其中的文档时，服务器将在这个文档所在的各 级目录中查找此配置文件，因此会带来性能问题，笔者建议关闭分布式配置文件功能。 ServerTokens：控制服务器回应给客户端的”Server:”应答头是否包含关于服务器操作系统类型和编译进的模块描述信息，同时还控制着ServerSignature指令的显示内容。可选值 为Full | OS | Minor | Minimal | Major |Prod。笔者建议设置为显示最少信息的Prod。 ServerSignature：配置服务器生成页面的页脚，可选值为On | Off |EMail。采用On会简单的增加一行关于服务器版本和正在伺服的虚拟主机的ServerName，而EMail设置会额外 创建一个指向 ServerAdmin的”mailto:”部分。建议使用默认值Off。 HostnameLookups：设置是否启用对客户端IP的DNS查找，可选值为On | Off |Double。DNS查询会造成明显的时间消耗，建议设置为Off。 ⑶安装配置apache模块注：apache的LoadModule是按顺序加载的，mod_cband（限速）要在mod_proxy（代理）之前。下面部分模块在编译安装apache时就已安装了。 ①、配置支持中文URL路径起作用的模块为mod_encoding 1、先打补丁 yum install patch -y # wget http://webdav.todo.gr.jp/download/mod_encoding-20021209.tar.gz # wgethttp://webdav.todo.gr.jp/download/experimental/mod_encoding.c.apache2.20040616 新版本mod_encoding.c 覆盖 # cp mod_encoding.c.apache2.20040616 mod_encoding-20021209/mod_encoding.c 这里必须要打一个apache 2.2的补丁。否则make也会出apxs rc=65536 之类的错误。 # wgethttp://www.aconus.com/\\~oyaji/faq/mod_encoding.c-apache2.2-20060520.patch # cd mod_encoding-20021209 # patch -p0 \\&lt; mod_encoding.c-apache2.2-20060520.patch 2、安装iconv-hook库 # cd mod_encoding-20021209/lib # ./configure –prefix=/usr # make # make install # ldconfig 3、生成 mod_encoding的so文件 ./configure –with-apxs=/usr/local/httpd/bin/apxs –with-iconv-hook=/usr/include make gcc -shared -o mod_encoding.so mod_encoding.o -Wc,-Wall -Llib -liconv_hook cp mod_encoding.so /usr/local/httpd/modules 4、编辑 apache 2.2 配置 vi /usr/local/httpd/conf/httpd.conf 加入以下行 LoadModule encoding_module modules/mod_encoding.so \\ EncodingEngine on NormalizeUsername on SetServerEncoding GBK DefaultClientEncoding UTF-8 GBK GB2312 AddClientEncoding “(Microsoft .* DAV \\$)” UTF-8 GBK GB2312 AddClientEncoding “Microsoft .* DAV” UTF-8 GBK GB2312 AddClientEncoding “Microsoft-WebDAV*“ UTF-8 GBK GB2312 \\&lt;/IfModule> ②、配置防DDOS攻击模块下载mod_evasive http://www.nuclearelephant.com/projects/mod_evasive #tar zxvf mod_evasive_1.10.1.tar.gz #cd mod_evasive #/usr/local/httpd/bin/apxs -i -a -c mod_evasive20.c 打开 httpd.conf文件，查看是否有以下行，如没有则加上去 LoadModule evasive20_module modules/mod_evasive20.so 并加入 \\ DOSHashTableSize 3097 DOSPageCount 2 DOSSiteCount 50 DOSPageInterval 1 DOSSiteInterval 1 DOSBlockingPeriod 10 \\&lt;/IfModule> ③、配置限制带宽模块名为mod-cband #tar xzvf mod-cband-0.9.6.1.tgz #cd mod-cband-0.9.6.1 ./configure –with-apxs=/usr/local/httpd/bin/apxs //指定一下apxs的路径，否则可能会出错 #make #make install 安装成功后提示： chmod 755 /usr/local/httpd/modules/mod_cband.so 打开/usr/local/httpd/conf/httpd.conf LoadModule cband_module modules/mod_cband.so已经添加。 安装模块到此完毕，以下是配置 然后在虚拟主机配置文件中，按以下方法修改： \\ ServerName www.example.com ServerAdmin webmaster\\@example.com DocumentRoot /home/www/html/example_com CBandLimit 100M //限制虚拟主机总访问带宽为100Mb。 CBandSpeed 1024 10 30//CBandSpeed限定总的最大链接速度为1024kb,最多并发处理10个请求每秒和30个链接每秒 CBandRemoteSpeed 20kb/s 5 3 //CBandRemoteSpeed限定一个用户最多能有20kb的链接速度,最多并发5个请求每秒和3个链接每秒 CBandPeriod 4W //设定多久对所记录的全局访问带宽进行重设（清零）。4W=4 weeks4周（一个月） \\&lt;Location /cband-status> SetHandler cband-status \\&lt;/Location> #开启了mod_cband的实时监测功能，可以通过http://server_name/cband-status进行直观的观测。（全局监测） \\&lt;Location /cband-status-me> SetHandler cband-status-me \\&lt;/Location> #开启了mod_cband的实时监测功能，可以通过http://server_name/cband-status-me进行直观的观测。（单一监测） \\&lt;/VirtualHost> ④、mod_proxy代理服务apache提供了mod_proxy模块用于提供代理服务，能够支持的包括正向代理、反向代理、透明代理、缓存、负载均衡，HTTP代理、FTP代理、SSL代理等若干强大的功能。 通常我们使用的比较多的，是正向代理。也就是在浏览器的网络连接属性框中，填写上一个代理服务器的ip和端口，即可通过代理服务器中转，去浏览网页。 如果apache没有安装proxy模块，可以不用重新编译，就能添加模块。 cd /home/soft/httpd-2.2.31/modules/proxy /usr/local/httpd/bin/apxs -c -i mod_proxy.c proxy_util.c (ps必须2个c一起编译，不然会报错) /usr/local/httpd/bin/apxs -c -i mod_proxy_http.cproxy_util.c vi /usr/local/httpd/conf/httpd.conf 添加以下行 LoadModule proxy_module modules/mod_proxy.so LoadModule proxy_http_module modules/mod_proxy_http.so 这里只要求安装模块，如果没有设置代理的要求，先不用配置。 配置正向代理: 首先在apache上启用mod_proxy模块，需要注意的是，如果在apache-2.2上，则还需要加载名为mod_proxy_http的模块。因为2.2系列把代理功能都拆分成N个小模块了。打开apache的conf(虚拟主机方式或全局配置)，加入如下几行：（全局配置） ProxyRequests On ProxyVia On \\ Order deny,allow Deny from all Allow from internal.example.com \\&lt;/Proxy> 保存退出，重启apache服务：service httpd restart现在即可在浏览器的网络连接属性框中，填写上your_apache_server_ip的ip地址，端口是80，开始用代理了。使用apache提供的代理，也可以加身份验证，或者设置ACL来限制客户端来源等。这些配置就和普通的apache站点配置一样。 注：使用正向代理时严格控制访问权限(使用ProxyRequests指令)是非常重要的。否则你的代理会被客户端利用来访问其它服务器并且隐藏客户端的真实身份。这不仅对您的网络有威胁，对整个因特网来说也同样如此。当使用反向代理(在”ProxyRequestsOff”条件下使用ProxyPass指令)的时候访问控制要相对宽松，因为客户端只能连接你配置的特定主机。 配置反向代理: 如从某地访问google太慢，但是机房服务器上很快，则可在服务器上设置反向代理连接到google，也就是把google映射到服务器上来访问。然后新建一个网站，即创建一个标准的配置段。这里我们将站点/google目录设置为google的反向代理。在这段里边，加入下边一内容： ProxyRequests Off \\ Order deny,allow Allow from all \\&lt;/Proxy> ProxyPass /google http://www.google.com///前面可以直接访问（80）后面代理的（82） ProxyPassReverse /google http://www.google.com/ 保存退出，重启apache。ProxyPass与ProxyPassReverse的内容总是一样，ProxyPassReverse是重定向~~~~ 现在即可使用浏览器来访问我的网站的/google目录。当打开这个目录的时候，会发现页面是google。点击google的下级页面，都可以正常的打开访问，而此时浏览器中的代理服务器并未设置任何内容——这就是反向代理。 ⑤、反向加速/代理加速模块模块名为mod_extract_forwarded tar zxvf mod_extract_forwarded2-0.1.tar.gz cd extract_forwarded /usr/local/httpd/bin/apxs -c -i -a mod_extract_forwarded2.c 这个全自动安装,会在apache的httpd.conf自动添加 LoadModule extract_forwarded_module modules/mod_extract_forwarded2.c 默认这时还不工作，还需要配置 (其中 127.0.0.1 为代理加速配置) MEForder refuse,accept MEFrefuse all MEFaccept 127.0.0.1 #MEFaddenv on #default on #MEFdebug on #default off 以下为测试 MEFdebug 设为 on 的话 cd /var/log/httpd/ tail error_log 可以看到很多具体信息 MEF: phase:post read request, initial substituted 1.1.1.1 for 127.0.0.1,http://2.2.2.2/file.html MEF: phase:URI translate, already done, NFA required, http://2.2.2.2/file.html MEF: phase:access check, already done, NFA required, http://2.2.2.2/file.html MEF: phase:cleanup initial, undo spoof substituted 127.0.0.1 for 1.1.1.1 1.1.1.1 为远端客户机 2.2.2.2 为服务器 用ip连接 当然域名也可以 如果不通过代理加速直接连的话 MEF: phase:post read request, no FORWARDED-FOR header, /favicon.ico MEF: phase:URI translate, no FORWARDED-FOR header, /favicon.ico MEF: phase:access check, no FORWARDED-FOR header, /favicon.ico ⑥、启用mod_expires模块mod_expires可以减少10%左右的重复请求，让重复的用户对指定的页面请求结果都CACHE在本地，根本不向服务器发出请求。 在使用之前,首先要确认一下”mod_expires”模组是否有启用。编辑Apache的”httpd.conf”配置文件。搜索找到这行，取消注释: #LoadModule expires_module modules/mod_expires.so ⑦、安装设置浏览器缓存模块mod_headers模块：该模块用来设置浏览器缓存文件，如果安装apache时没有安装mod_headers模块，使用以下apache安装加载 1、进入httpd源码包下的目录modules/metadata。 cd /home/soft/httpd-2.2.20/modules/metadata 2、执行安装命令。 /usr/local/httpd/bin/apxs -i -a -c mod_headers.c 如果要启用在httpd.conf 中设置： LoadModule headers_module modules/mod_headers.so \\ Header add MS-Author-Via “DAV” \\&lt;/IfModule> 上述所有模块安装配置完毕后重启apache 五.安装php⑴.安装php的依赖包文件如果没安装，会报错：configure: error: mcrypt.h not found. Please reinstalllibmcrypt 源码编译安装，去http://www.sourceforge.net下载Libmcrypt,mhash,mcrypt安装包 libmcrypt(libmcrypt-2.5.8.tar.gz )： mcrypt(mcrypt-2.6.8.tar.gz ): mhash(mhash-0.9.9.9.tar.gz ): ①.先安装Libmcrypttar -zxvf libmcrypt-2.5.8.tar.gz cd libmcrypt-2.5.8 ./configure make make install 说明：libmcript默认安装在/usr/local ②.再安装mhashtar -zxvf mhash-0.9.9.9.tar.gz cd mhash-0.9.9.9 ./configure make make install ③.最后安装mcrypttar -zxvf mcrypt-2.6.8.tar.gz cd mcrypt-2.6.8 ./configure make make install 可能还是提示错误，以下解决方法，先 ln -s /usr/local/bin/libmcrypt-config /usr/bin/libmcrypt-config 再编译mcrypt 如果错误，可能还是变量的问题，解决方法如下：运行 export LD_LIBRARY_PATH=/usr/local/lib: LD_LIBRARY_PATH 然后make &amp;&amp; make install 完成 ⑵.正式安装php①.下载php并解压：tar zxf php-5.2.13.tar.gz cd php-5.2.13 配置编译参数: ./configure –prefix=/usr/local/php –with-apxs2=/usr/local/httpd/bin/apxs–with-gd –with-config-file-path=/usr/local/php/etc/–with-mysql=/usr/local/mysql –with-mysqli=/usr/local/mysql/bin/mysql_config–with-iconv-dir=/usr/local –with-freetype-dir –with-jpeg-dir –with-png-dir–with-zlib –with-libxml-dir –enable-xml –disable-rpath –enable-discard-path–enable-dafe-mode –enable-bcmath –enable-shmop –enable-sysvsem–enable-inline-optimization –with-curl –with-curlwrappers –enable-mbregex–enable-mbstring –with-mcrypt –with-gld –enable-gd-native-ttf –with-openssl–with-mhash –enable-pcntl –enable-sockets –enable-zip –enable-soap–enable-inline-optimization make make test (可跳过这一句) make install ②编译中可能的报错信息:configure:error:libjpeg.(a|so) not found Configure: error: libpng.(also) not found 方法一：更改Linux的系统共享库搜索路径配置文件vi /etc/ld.so.conf 加入以下行 /usr/lib64 /usr/lib /usr/local/lib /usr/local/lib64 /lib64 /lib 修改了ld.so.conf后要重新运行一下ldconfig 方法二：创建符号链接： ln -s /usr/lib64/libjpeg.so /usr/lib/ ln -s /usr/lib64/libpng.so /usr/lib/ 方法三：手动复制文件(不推荐） 因为是64位系统,可能系统找不到库文件,所以只能手动复制个 \\cp -frp /usr/lib64/libjpeg.* /usr/lib/ 这样就可以把error:libjpeg.(a|so) not found解决 Configure: error: libpng.(also) not found.的解决办法: \\cp -frp /usr/lib64/libpng* /usr/lib/ 好了,这样就不会出错了. ③初始化配置文件复制源码包里php.ini文件到/usr/local/php/etc/目录 cp /home/soft/php-5.2.13/php.ini-dist /usr/local/php/etc/php.ini 创建符号链接，令任何目录都可以使用php -v命令 ln -s /usr/local/php/bin/* /usr/bin/ 保存退出，php安装完成。 六.PHP模块的安装及最后配置⑴php性能优化，安装ZendOptimizer该模块只适用于PHP tar zxvf ZendOptimizer-3.3.3-linux-glibc23-x86_64.tar.gz cd ZendOptimizer-3.3.3-linux-glibc23-x86_64 ./install 根据提示，输入Zend安装路径/usr/local/Zend(默认) php.ini文件目录/usr/local/php/etc/ apache的apachectl文件目录/usr/local/httpd/bin/apachectl 然后重启apache,退出zend安装程序。 XXX查看确认L.A.M.P环境信息、提升 PHP 安全性在网站根目录放置 phpinfo.php 脚本，检查phpinfo中的各项信息是否正确。 phpinfo.php文件添加以下几行 \\&lt;?php phpinfo(); ?> 确认 PHP 能够正常工作后，在 php.ini 中进行设置提升 PHP安全性（禁用相关不使用的功能）。 vi /usr/local/php/etc/php.ini 找到： disable_functions = 设置为如下(注：要用到的功能不要添加到下面）： phpinfo,passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,ini_alter,ini_alter,ini_restore,dl,pfsockopen,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server","categories":[],"tags":[{"name":"旧文转换","slug":"旧文转换","permalink":"https://zeroto.one/tags/旧文转换/"},{"name":"LAMP","slug":"LAMP","permalink":"https://zeroto.one/tags/LAMP/"}]},{"title":"旧文系列--JDK Resin Apache 配置","slug":"JSP_env","date":"2018-11-03T11:05:35.000Z","updated":"2019-09-17T18:22:27.856Z","comments":true,"path":"2018/11/03/JSP_env/","link":"","permalink":"https://zeroto.one/2018/11/03/JSP_env/","excerpt":"环境说明：CentOS6.5下JDK1.6、apache2.2、resin3.1 源码编译安装 注: 本文由工具直接word转换为md, 没有做代码高亮等格式化处理, 观感较差.","text":"环境说明：CentOS6.5下JDK1.6、apache2.2、resin3.1 源码编译安装 注: 本文由工具直接word转换为md, 没有做代码高亮等格式化处理, 观感较差. 一.JDK安装a) 下载JDK安装包jdk-6u29-linux-x64-rpm.bin b) 修改权限（改为可运行+x） chmod +x jdk-6u29-linux-x64-rpm.bin c) 执行 ./jdk-6u29-linux-x64-rpm.bin d) 设置系统环境变量。 为防止出现乱码 （编辑/etc/profile 添加exportLC_ALL=zh_CN.GB18030保存退出。 source /etc/profile） Vi /etc/sysconfig/i18n 注释以下句（使用注释不用删除，防止以后找回时没有） #LANG=”en_US.UTF-8” #SYSFONT=”latarcyrheb-sun16” 添加以下句 LANG=”zh_CN.GB18030” LANGUAGE=”zh_CN.GB18030:zh_CN.GB2312:zh_CN” SUPPORTED=”zh_CN.UTF-8:zh_CN:zh:en_US.UTF-8:en_US:en” SYSFONT=”lat0-sun16” 在/etc/profile最下面加上以下几段 # set java JAVA_HOME=/usr/java/jdk1.6.0_29 PATH=\\$JAVA_HOME/bin:\\$PATH CLASSPATH=.:\\$JAVA_HOME/lib JRE_HOME=\\$JAVA_HOME/jre export JAVA_HOME PATH CLASSPATH JRE_HOME export LC_ALL=zh_CN.GB18030 保存退出。 source /etc/profile e）测试下JDK是否成功。 java -version 如果出现以下信息说明JDK配置成功。 java version “1.6.0_29” Java(TM) SE Runtime Environment (build 1.6.0_29-b11) Java HotSpot(TM) 64-Bit Server VM (build 20.4-b02, mixed mode) 二. 防火墙允许服务（安装完系统要做）iptables -L 列出目前防火墙设置 iptables -F 清空防火墙规则 或者直接删除 /etc/sysconfig/ 下 iptables 和iptables.old 文件 vi /etc/selinux/config SELINUX=disabled 关闭系统安全策略（永久，需重启） getenforce 获取目前状态 setenforce 0 临时改（无需重启） 三. 安装apache安装GCC等组件（如果系统没有安装） 如果安装apache提示“no acceptable C compiler found in\\$PATH”，这是因为系统中没有安装gcc yum install -y gcc gcc-c++ zlib-devel （1）下载apache，下载地址为：http://mirror.esocc.com/apache//httpd/httpd-2.2.31.tar.gz （2）tar zxvf httpd-2.2.31.tar.gz （3）cd httpd-2.2.31 （4）./configure –prefix=/usr/local/httpd –enable-so –enable-mods-shared=most–with-mpm=worker –with-included-apr –enable-expires=shared–enable-deflate=shared –enable-rewrite=shared –enable-static-support （5）make &amp;&amp; make install （6）apache安装完成后，进入/usr/local/httpd/bin/目录下，执行./apachectlstart命令启动apache （7）centos本机访问，使用curl -Ihttp://127.0.0.1/命令查看apache服务是否安装正常。（如显示OK 代号200 说明成功） 四、编辑Apache的扩展配置文件配置apache的进程管理、默认设置以及虚拟主机。 找到： #Include conf/extra/httpd-mpm.conf #Include conf/extra/httpd-info.conf #Include conf/extra/httpd-vhosts.conf #Include conf/extra/httpd-default.conf 去掉前面的“#”号，取消注释。 注：以上 4个扩展配置文件中的设置请按照相关原则进行合理配置！修改完成后保存退出。 ①.配置Apache进程管理查看当前httpd的工作模式，可执行 /usr/local/httpd/bin/apachectl -l 进程管理模式共有三种：worker模式、prefork模式、Event模式 配置文件为：/usr/local/httpd/conf/extra/httpd-mpm.conf 将配置文件中下面一段修改为如下，worker工作模式例子与详解： \\ StartServers 2 //启动apache时，首次启动2个进程 MaxClients 150 //最多支持150个并发的http链接 MinSpareThreads 25 //最少有25个线程空闲，否则新增加进程或者线程了 MaxSpareThreads 75 //最多有75个线程空闲，否则就要自动回收多余空闲的线程或者进程 ThreadsPerChild 25 //启动一个进程时，此进程首先启动25个线程 MaxRequestsPerChild 1000//允许每个进程在它的生命周期内处理的http最大请求1000.。0为没有限制。（不建议设为0，可能内存溢出） \\&lt;/IfModule> 以下是例子配置 \\ ServerLimit 50 //最多可以启动50个进程 ThreadLimit 1000 //每个进程最多可以启动1000个线程 StartServers 8 MaxClients 5000 MinSpareThreads 750 MaxSpareThreads 2500 ThreadsPerChild 1000 MaxRequestsPerChild 20000 \\&lt;/IfModule> 指令说明（根据每台机的配置，设置对应的参数）： StartServers：设置服务器启动时建立的子进程数量。因为子进程数量动态的取决于负载的轻重,所有一般没有必要调整这个参数。 MaxClients：允许同时伺服的最大接入请求数量(最大线程数量)。任何超过MaxClients限制的请求都将进入等候队列。默认值是400，16(ServerLimit)乘以25(ThreadsPerChild)的结果。因此要增加MaxClients的时候，你必须同时增加ServerLimit的值。 ThreadsPerChild:每个子进程建立的常驻的执行线程数。默认值是25。子进程在启动时建立这些线程后就不再建立新的线程了。 MinSpareThreads:最小空闲线程数,默认值是75。这个MPM将基于整个服务器监视空闲线程数。如果服务器中总的空闲线程数太少，子进程将产生新的空闲线程。 MaxSpareThreads:设置最大空闲线程数。默认值是250。这个MPM将基于整个服务器监视空闲线程数。如果服务器中总的空闲线程数太多，子进程将杀死多余的空闲线程。MaxSpareThreads的取值范围是有限制的。Apache将按照如下限制自动修正你设置的值：worker要求其大于等于MinSpareThreads加上ThreadsPerChild的和。 MaxRequestsPerChild：设置每个子进程在其生存期内允许伺服的最大请求数量。到达MaxRequestsPerChild的限制后，子进程将会结束。如果MaxRequestsPerChild为0，子进程将永远不会结束。将MaxRequestsPerChild设置成非零值有两个好处： 1.可以防止(偶然的)内存泄漏无限进行，从而耗尽内存。 2.给进程一个有限寿命，从而有助于当服务器负载减轻的时候减少活动进程的数量。 注意对于KeepAlive链接，只有第一个请求会被计数。事实上，它改变了每个子进程限制最大链接数量的行为。 先计算每一个httpd请求大概占用多少内存，除去系统和其他程序占用的内存后，估计每秒请求数有多少，就可以计算出来了 ②.配置Apache虚拟主机配置文件为：/usr/local/httpd/conf/extra/httpd-vhosts.conf 将配置文件中下面一段修改为相应虚拟主机域名和相应目录，下例为改为www.test.org： \\ ServerAdmin webmaster\\@dummy-host2.localhost DocumentRoot “/home/www/test/“ ServerName www.test.org \\&lt;Directory “/home/www/test/“> Options Indexes FollowSymLinks AllowOverride All Order allow,deny Allow from all \\&lt;/Directory> \\&lt;/VirtualHost> 新建目录（改为上述的虚拟主机目录） mkdir -p /home/www/test/ 重启apache服务service httpd restart 如果想要在centos本机测试，用虚拟主机域名方式浏览，请编辑vi /etc/hosts文件加上： 127.0.0.1 www.test.org ③配置Apache服务器默认设置vi /usr/local/httpd/conf/extra/httpd-default.conf # 联机超过 60 秒失败就重试 Timeout 60 # 开启 KeepAlive KeepAlive Off # 设定同一时间可容许的 KeppAlive 量 MaxKeepAliveRequests 5000 # KeepAlive 多久要自动 Timeout 掉 KeepAliveTimeout 3 # 关掉那费时的 DNS 查寻 HostnameLookups Off 总结一下： 在内存非常充足的服务器上，不管是否关闭 KeepAlive功能，服务器性能不会有明显变化； 如果服务器内存较少，或者服务器有非常大量的文件系统访问时，或者主要处理动态网页服务，关闭KeepAlive后可以节省很多内存，而节省出来的内存用于文件系统Cache，可以提高文件系统访问的性能，并且系统会更加稳定。 补充： 关于是否应该关闭 KeepAlive选项，我觉得可以基于下面的一个公式来判断。 在理想的网络连接状况下，系统的Apache 进程数和内存使用可以用如下公式表达： HttpdProcessNumber = KeepAliveTimeout * TotalRequestPerSecond /Average(KeepAliveRequests) HttpdUsedMemory = HttpdProcessNumber * MemoryPerHttpdProcess 换成中文： 总Apache进程数 = KeepAliveTimeout * 每秒种HTTP请求数 / 平均KeepAlive请求 Apache占用内存 = 总Apache进程数 * 平均每进程占用内存数 需要特别说明的是： [平均KeepAlive请求] 数，是指每个用户连接上服务器后，持续发出的 HTTP请求数。当 KeepAliveTimeout 等 0 或者 KeepAlive 关闭时，KeepAliveTimeout不参与乘的运算从上面的公式看，如果 [每秒用户请求] 多，[KeepAliveTimeout]的值大，[平均KeepAlive请求] 的值小，都会造成 [Apache进程数] 多和 [内存]多，但是当 [平均KeepAlive请求] 的值越大时，[Apache进程数] 和 [内存]都是趋向于减少的。 基于上面的公式，我们就可以推算出当 平均KeepAlive请求 \\&lt;= KeepAliveTimeout时，关闭 KeepAlive 选项是划算的，否则就可以考虑打开。 Timeout：设置服务器在断定请求失败前等待的秒数。默认值300。 KeepAlive：设置是否启用HTTP持久链接，On 代表打开，Off代表关闭。如果用于同一页面包含大量静态文件的应用，设置为On，以提高性能；如果用于主要为动态页面的应用， 设置为Off，以节约内存资源；如果服务器前跑有squid或者其它七层设备，设置为On。 MaxKeepAliveRequests：限制当启用KeepAlive时，每个连接允许的请求数量。如果将此值设为”0”，将不限制请求的数目。笔者建议将此值设为100-500之间的一个值，以确保最优 的服务器性能。 KeepAliveTimeout：设置持久链接中服务器在两次请求之间等待的秒数。对于高负荷服务器来说，KeepAliveTimeout值较大会导致一些性能方面的问题：超时值越大，与空闲客户 端保持连接的进程就越多。 UseCanonicalName：配置服务器如何确定它自己的域名，可选值为On | Off |DNS。DNS用于为大量基于IP的虚拟主机支持那些古董级的不提供”Host:”头的浏览器使用。笔者建议 设置为Off。 AccessFileName：设置分布式配置文件的名字，默认为.htaccess。如果为某个目录启用了分布式配置文件功能，那么在向客户端返回其中的文档时，服务器将在这个文档所在的各 级目录中查找此配置文件，因此会带来性能问题，笔者建议关闭分布式配置文件功能。 ServerTokens：控制服务器回应给客户端的”Server:”应答头是否包含关于服务器操作系统类型和编译进的模块描述信息，同时还控制着ServerSignature指令的显示内容。可选值 为Full | OS | Minor | Minimal | Major |Prod。笔者建议设置为显示最少信息的Prod。 ServerSignature：配置服务器生成页面的页脚，可选值为On | Off |EMail。采用On会简单的增加一行关于服务器版本和正在伺服的虚拟主机的ServerName，而EMail设置会额外 创建一个指向 ServerAdmin的”mailto:”部分。建议使用默认值Off。 HostnameLookups：设置是否启用对客户端IP的DNS查找，可选值为On | Off |Double。DNS查询会造成明显的时间消耗，建议设置为Off。 五、安装配置apache模块注：apache的LoadModule是按顺序加载的，mod_cband（限速）要在mod_proxy（代理）之前。下面部分模块在编译安装apache时就已安装了。 ①配置支持中文URL路径起作用的模块为mod_encoding 1、先打补丁 yum install patch -y # wget http://webdav.todo.gr.jp/download/mod_encoding-20021209.tar.gz # wgethttp://webdav.todo.gr.jp/download/experimental/mod_encoding.c.apache2.20040616 新版本mod_encoding.c 覆盖 # cp mod_encoding.c.apache2.20040616 mod_encoding-20021209/mod_encoding.c 这里必须要打一个apache 2.2的补丁。否则make也会出apxs rc=65536 之类的错误。 # wgethttp://www.aconus.com/\\~oyaji/faq/mod_encoding.c-apache2.2-20060520.patch # cd mod_encoding-20021209 # patch -p0 \\&lt; mod_encoding.c-apache2.2-20060520.patch 2、安装iconv-hook库 # cd mod_encoding-20021209/lib # ./configure –prefix=/usr # make # make install # ldconfig 3、生成 mod_encoding的so文件 ./configure –with-apxs=/usr/local/httpd/bin/apxs –with-iconv-hook=/usr/include make gcc -shared -o mod_encoding.so mod_encoding.o -Wc,-Wall -Llib -liconv_hook cp mod_encoding.so /usr/local/httpd/modules 4、编辑 apache 2.2 配置 vi /usr/local/httpd/conf/httpd.conf 加入以下行 LoadModule encoding_module modules/mod_encoding.so \\ EncodingEngine on NormalizeUsername on SetServerEncoding GBK DefaultClientEncoding UTF-8 GBK GB2312 AddClientEncoding “(Microsoft .* DAV \\$)” UTF-8 GBK GB2312 AddClientEncoding “Microsoft .* DAV” UTF-8 GBK GB2312 AddClientEncoding “Microsoft-WebDAV*“ UTF-8 GBK GB2312 \\&lt;/IfModule> ②配置防DDOS攻击模块下载mod_evasive http://www.nuclearelephant.com/projects/mod_evasive #tar zxvf mod_evasive_1.10.1.tar.gz #cd mod_evasive #/usr/local/httpd/bin/apxs -i -a -c mod_evasive20.c 打开 httpd.conf文件，查看是否有以下行，如没有则加上去 LoadModule evasive20_module modules/mod_evasive20.so 并加入 \\ DOSHashTableSize 3097 DOSPageCount 2 DOSSiteCount 50 DOSPageInterval 1 DOSSiteInterval 1 DOSBlockingPeriod 10 \\&lt;/IfModule> ③配置限制带宽模块名为mod-cband #tar xzvf mod-cband-0.9.6.1.tgz #cd mod-cband-0.9.6.1 ./configure –with-apxs=/usr/local/httpd/bin/apxs //指定一下apxs的路径，否则可能会出错 #make #make install 安装成功后提示： chmod 755 /usr/local/httpd/modules/mod_cband.so 打开/usr/local/httpd/conf/httpd.conf LoadModule cband_module modules/mod_cband.so已经添加。 安装模块到此完毕，以下是配置 然后在虚拟主机配置文件中，按以下方法修改： \\ ServerName www.example.com ServerAdmin webmaster\\@example.com DocumentRoot /home/www/html/example_com CBandLimit 100M //限制虚拟主机总访问带宽为100Mb。 CBandSpeed 1024 10 30//CBandSpeed限定总的最大链接速度为1024kb,最多并发处理10个请求每秒和30个链接每秒 CBandRemoteSpeed 20kb/s 5 3 //CBandRemoteSpeed限定一个用户最多能有20kb的链接速度,最多并发5个请求每秒和3个链接每秒 CBandPeriod 4W //设定多久对所记录的全局访问带宽进行重设（清零）。4W=4 weeks4周（一个月） \\&lt;Location /cband-status> SetHandler cband-status \\&lt;/Location> #开启了mod_cband的实时监测功能，可以通过http://server_name/cband-status进行直观的观测。（全局监测） \\&lt;Location /cband-status-me> SetHandler cband-status-me \\&lt;/Location> #开启了mod_cband的实时监测功能，可以通过http://server_name/cband-status-me进行直观的观测。（单一监测） \\&lt;/VirtualHost> ④mod_proxy代理服务apache提供了mod_proxy模块用于提供代理服务，能够支持的包括正向代理、反向代理、透明代理、缓存、负载均衡，HTTP代理、FTP代理、SSL代理等若干强大的功能。 通常我们使用的比较多的，是正向代理。也就是在浏览器的网络连接属性框中，填写上一个代理服务器的ip和端口，即可通过代理服务器中转，去浏览网页。 如果apache没有安装proxy模块，可以不用重新编译，就能添加模块。 cd /home/soft/httpd-2.2.31/modules/proxy /usr/local/httpd/bin/apxs -c -i mod_proxy.c proxy_util.c (ps必须2个c一起编译，不然会报错) /usr/local/httpd/bin/apxs -c -i mod_proxy_http.cproxy_util.c vi /usr/local/httpd/conf/httpd.conf 添加以下行 LoadModule proxy_module modules/mod_proxy.so LoadModule proxy_http_module modules/mod_proxy_http.so 这里只要求安装模块，如果没有设置代理的要求，先不用配置。 配置正向代理: 首先在apache上启用mod_proxy模块，需要注意的是，如果在apache-2.2上，则还需要加载名为mod_proxy_http的模块。因为2.2系列把代理功能都拆分成N个小模块了。打开apache的conf(虚拟主机方式或全局配置)，加入如下几行：（全局配置） ProxyRequests On ProxyVia On \\ Order deny,allow Deny from all Allow from internal.example.com \\&lt;/Proxy> 保存退出，重启apache服务：service httpd restart现在即可在浏览器的网络连接属性框中，填写上your_apache_server_ip的ip地址，端口是80，开始用代理了。使用apache提供的代理，也可以加身份验证，或者设置ACL来限制客户端来源等。这些配置就和普通的apache站点配置一样。 注：使用正向代理时严格控制访问权限(使用ProxyRequests指令)是非常重要的。否则你的代理会被客户端利用来访问其它服务器并且隐藏客户端的真实身份。这不仅对您的网络有威胁，对整个因特网来说也同样如此。当使用反向代理(在”ProxyRequestsOff”条件下使用ProxyPass指令)的时候访问控制要相对宽松，因为客户端只能连接你配置的特定主机。 配置反向代理: 如从某地访问google太慢，但是机房服务器上很快，则可在服务器上设置反向代理连接到google，也就是把google映射到服务器上来访问。然后新建一个网站，即创建一个标准的配置段。这里我们将站点/google目录设置为google的反向代理。在这段里边，加入下边一内容： ProxyRequests Off \\ Order deny,allow Allow from all \\&lt;/Proxy> ProxyPass /google http://www.google.com///前面可以直接访问（80）后面代理的（82） ProxyPassReverse /google http://www.google.com/ 保存退出，重启apache。ProxyPass与ProxyPassReverse的内容总是一样，ProxyPassReverse是重定向~~~~ 现在即可使用浏览器来访问我的网站的/google目录。当打开这个目录的时候，会发现页面是google。点击google的下级页面，都可以正常的打开访问，而此时浏览器中的代理服务器并未设置任何内容——这就是反向代理。 ⑤反向加速/代理加速模块模块名为mod_extract_forwarded tar zxvf mod_extract_forwarded2-0.1.tar.gz cd extract_forwarded /usr/local/httpd/bin/apxs -c -i -a mod_extract_forwarded2.c 这个全自动安装,会在apache的httpd.conf自动添加 LoadModule extract_forwarded_module modules/mod_extract_forwarded2.c 默认这时还不工作，还需要配置 (其中 127.0.0.1 为代理加速配置) MEForder refuse,accept MEFrefuse all MEFaccept 127.0.0.1 #MEFaddenv on #default on #MEFdebug on #default off 以下为测试 MEFdebug 设为 on 的话 cd /var/log/httpd/ tail error_log 可以看到很多具体信息 MEF: phase:post read request, initial substituted 1.1.1.1 for 127.0.0.1,http://2.2.2.2/file.html MEF: phase:URI translate, already done, NFA required, http://2.2.2.2/file.html MEF: phase:access check, already done, NFA required, http://2.2.2.2/file.html MEF: phase:cleanup initial, undo spoof substituted 127.0.0.1 for 1.1.1.1 1.1.1.1 为远端客户机 2.2.2.2 为服务器 用ip连接 当然域名也可以 如果不通过代理加速直接连的话 MEF: phase:post read request, no FORWARDED-FOR header, /favicon.ico MEF: phase:URI translate, no FORWARDED-FOR header, /favicon.ico MEF: phase:access check, no FORWARDED-FOR header, /favicon.ico ⑥启用mod_expires模块mod_expires可以减少10%左右的重复请求，让重复的用户对指定的页面请求结果都CACHE在本地，根本不向服务器发出请求。 在使用之前,首先要确认一下”mod_expires”模组是否有启用。编辑Apache的”httpd.conf”配置文件。搜索找到这行，取消注释: #LoadModule expires_module modules/mod_expires.so 上述所有模块安装配置完毕后重启apache ⑦安装设置浏览器缓存模块mod_headers模块：该模块用来设置浏览器缓存文件，如果安装apache时没有安装mod_headers模块，使用以下apache安装加载 1、进入httpd源码包下的目录modules/metadata。 cd /home/soft/httpd-2.2.20/modules/metadata 2、执行安装命令。 /usr/local/httpd/bin/apxs -i -a -c mod_headers.c 如果要启用在httpd.conf 中设置： LoadModule headers_module modules/mod_headers.so \\ Header add MS-Author-Via “DAV” \\&lt;/IfModule> 六. 安装Resina) 下载Resin源码包resin-pro-3.1.12.tar.gz 放到目录/home/soft b) 解压resin源码包 tar -zxvf resin-pro-3.1.12.tar.gz c)进入文件夹 cd /home/soft/resin-pro-3.1.12 d) 编译源码 ./configure –prefix=/usr/local/resin –with-apxs=/usr/local/httpd/bin/apxs–with-java-home=/usr/java/jdk1.6.0_29 make &amp;&amp; make install e)安装许可证(覆盖，最好先删除原文件） cp /home/soft/license.jar /usr/local/resin/lib/license.jar 七. apache与resin的整合配置a) 修改apache配置文件 进入apache目录/usr/local/httpd/conf/目录下，查看httpd.conf文件如果发现以下内容，则表示整合成功了一半。 LoadModule caucho_module /usr/local/httpd/modules/mod_caucho.so ResinConfigServer localhost 6800 CauchoConfigCacheDirectory /tmp CauchoStatus yes 上述6800是端口。 找到以下：这一行后增加index.jsp 这样可以支持JSP文件 \\ DirectoryIndex index.html \\&lt;/IfModule> 将该行改为 \\ DirectoryIndex index.html index.htm index.jsp \\&lt;/IfModule> 找到#ServerName www.example.com:80在下面添加一行 ServerName localhost:80 修改其工程目录： DocumentRoot “/usr/local/resin/webapps/ROOT” 以下行修改路径及控制目录和文件的访问授权：如下设为允许所有 \\&lt;Directory “/usr/local/resin/webapps/ROOT”> Options FollowSymLinks AllowOverride None Order allow,deny Allow from all \\&lt;/Directory> httpd.conf文件最后加上 \\&lt;Location /caucho-status> SetHandler caucho-status \\&lt;/Location> 保存退出，Windows下访问“ip地址/caucho-status”查看是否整合成功。 b)修改完apache之后，同时修改resin的配置文件/usr/local/resin/conf/resin.conf 将以下部分中的root-directory改为你的工程目录与apache的工程目录相同 \\&lt;host id=”” root-directory=”.”> \\&lt;web-app id=”/“ root-directory=”webapps/ROOT”/> 修改端口号（默认8080）、网站路径。（默认网站路径在第300行） 查找utf-8在注释下添加以下行： \\&lt;character-encoding>utf-8\\&lt;/character-encoding> 修改JVM内存,则只需修改resin.conf,如下配置即可（根据每台机情况配置相应内存大小），例：生产环境设定 \\&lt;jvm-arg>-Xdebug\\&lt;/jvm-arg> \\&lt;jvm-arg>-Xmx2048M\\&lt;/jvm-arg> \\&lt;jvm-arg>-Xms2048M\\&lt;/jvm-arg> \\&lt;jvm-arg>-Xmn256M\\&lt;/jvm-arg> \\&lt;jvm-arg>-XX:PermSize=128M\\&lt;/jvm-arg> \\&lt;jvm-arg>-XX:MaxPermSize=256M\\&lt;/jvm-arg> \\&lt;jvm-arg>-Xss256K\\&lt;/jvm-arg> \\&lt;jvm-arg>-XX:SurvivorRatio=1\\&lt;/jvm-arg> \\&lt;jvm-arg>-XX:+CMSParallelRemarkEnabled\\&lt;/jvm-arg> \\&lt;jvm-arg>-XX:+UseCMSCompactAtFullCollection\\&lt;/jvm-arg> \\&lt;jvm-arg>-XX:CMSFullGCsBeforeCompaction=0\\&lt;/jvm-arg> \\&lt;jvm-arg>-XX:ParallelGCThreads=2\\&lt;/jvm-arg> \\&lt;jvm-arg>-XX:LargePageSizeInBytes=128M\\&lt;/jvm-arg> \\&lt;jvm-arg>-XX:+UseFastAccessorMethods\\&lt;/jvm-arg> \\&lt;jvm-arg>-XX:+UseCMSInitiatingOccupancyOnly\\&lt;/jvm-arg> \\&lt;jvm-arg>-XX:CMSInitiatingOccupancyFraction=80\\&lt;/jvm-arg> \\&lt;jvm-arg>-XX:SoftRefLRUPolicyMSPerMB=0\\&lt;/jvm-arg> \\&lt;jvm-arg>-XX:+PrintClassHistogram\\&lt;/jvm-arg> \\&lt;jvm-arg>-XX:+PrintGCDetails\\&lt;/jvm-arg> \\&lt;jvm-arg>-XX:+PrintGCTimeStamps\\&lt;/jvm-arg> \\&lt;jvm-arg>-XX:+PrintHeapAtGC\\&lt;/jvm-arg> \\&lt;jvm-arg>-XX:-UseGCOverheadLimit\\&lt;/jvm-arg> \\&lt;jvm-arg>-XX:+UseConcMarkSweepGC\\&lt;/jvm-arg> \\&lt;jvm-arg>-Xloggc:log/gc.log\\&lt;/jvm-arg> 说明: (1)J-server -Xms200m -Xmx1024m 其中，-Xms200m表示启动时，初时内存大小，-Xmx1024m 最大内存占用大小。(注：最大内存设定不能超过物理最大内存的70%) 查看内存请使用下句： free -m (2)-XX:MaxNewSize=256m -XX:MaxPermSize=256m 表示：内存的永久保存区域的大小 (3)-Djava.awt.headless=true 解决在linux/unix验证码图片不能显示的问题。 八.配置完成，测试（1）将测试文件(例如index.jsp)放到/usr/local/resin/webapps/ROOT目录下。 （2）进入resin目录/usr/local/resin/bin目录下执行./httpd.shrestart命令重启resin服务。 （3）centos本地机访问http://127.0.0.1:8080/index.jsp WINDOWS下测试； http://外网IP:8080/index.jsp 可访问到index.jsp页面，说明resin服务配置正常。 （4）进入apache目录/usr/local/httpd/bin目录下执行./apachectlrestart命令重启apache服务。 （5）同样访问http://127.0.0.1/index.jsp WINDOWS下测试； http://外网IP/index.jsp 此时的端口号为apache的端口号80，发现apache也可以解析jsp文件了，整合成功。 九.添加到开机启动（1）设置resin开机启动cp /usr/local/resin/bin/httpd.sh /etc/init.d/resin chmod +x /etc/init.d/resin //添加Resin执行权限 修改脚本 vi /etc/init.d/resin，在头部之下，添加一行 #!/bin/sh # 此处添加以下行 # chkconfig: 345 85 15 添加以下HOME路径： JAVA_HOME=/usr/java/jdk1.6.0_29 RESIN_HOME=/usr/local/resin 在/etc/profile下增加以下行 RESIN_HOME=/usr/local/resin export RESIN_HOME 保存退出。刷新一下：source /etc/profile chkconfig –add resin //添加Resin为系统服务 chkconfig resin on //设置Resin开机自动启动 chkconfig //检查是否开启 （2）设置apache开机启动cp /usr/local/httpd/bin/apachectl /etc/init.d/httpd vi /etc/init.d/httpd 编辑，在头部之下，添加一行 #!/bin/sh # 此处添加以下行，保存退出。 # chkconfig: 345 85 15 chkconfig –add httpd //添加开机启动 chkconfig httpd on chkconfig //检查是否开启 十.其他命令说明补充补充：删除/usr/local/resin/webapps/resin-doc.war文件，防止漏洞被利用。 临时启动resin命令/etc/init.d/resin start 或service resin start 查看状态service resin status 注：”service 软件名 start/stop”命令，是搜索/etc/init.d/目录下的脚本 查看服务是否开启: chkconfig 查看端口是否开启：netstat -ntl （netstat 显示网络相关信息：网络连接，路由表，接口状态，masquerade连接，多播成员等） 安装lrzsz软件：搭配SecureCRT使用的上传下载软件 yum install lrzsz -y rz上传sz下载，默认传输目录在SecureCRT会话里xmodem里设置 同步时间ntp 先安装yum install ntp -y ntpdate 0.asia.pool.ntp.org","categories":[],"tags":[{"name":"旧文转换","slug":"旧文转换","permalink":"https://zeroto.one/tags/旧文转换/"},{"name":"JSP","slug":"JSP","permalink":"https://zeroto.one/tags/JSP/"}]},{"title":"word旧文转换md系列","slug":"word_to_md","date":"2018-11-03T10:31:08.000Z","updated":"2019-09-17T18:22:27.856Z","comments":true,"path":"2018/11/03/word_to_md/","link":"","permalink":"https://zeroto.one/2018/11/03/word_to_md/","excerpt":"旧文转录系列 以前写的文章记录是word文档格式, 最近一两年都已经改为markdown格式. markdown格式对代码支持比较好, 有语法高亮, 还能很方便地格式化文章. 最近发现了一个word文档转换为md格式的microsoft office 插件—-writage","text":"旧文转录系列 以前写的文章记录是word文档格式, 最近一两年都已经改为markdown格式. markdown格式对代码支持比较好, 有语法高亮, 还能很方便地格式化文章. 最近发现了一个word文档转换为md格式的microsoft office 插件—-writage 接下来把以前写的部分word文章转化为md格式发布出来, 转换可能会丢失一些样式, 而且写文章的时间也比较久了. 只做转换, 样式和错误修改就没时间了搞了, 毕竟文章很长, 而且比较忙. 至于能帮到坑到大家多少就看缘分了. writage","categories":[],"tags":[{"name":"旧文转换","slug":"旧文转换","permalink":"https://zeroto.one/tags/旧文转换/"}]},{"title":"macOS下mech(替代vagrant)配合VMWare使用","slug":"macos_mech_and_wmware","date":"2018-10-31T13:35:36.000Z","updated":"2019-09-17T18:22:27.856Z","comments":true,"path":"2018/10/31/macos_mech_and_wmware/","link":"","permalink":"https://zeroto.one/2018/10/31/macos_mech_and_wmware/","excerpt":"环境说明:macOS 10.14 下VMWare Fusion Pro 11和客户机CentOS7 —2019年更新，virtualbox发布6.x版性能及界面都令我很满意，wmware没太大优势，没必要用wmware了（mech当初用了一周就不用了） 个人觉得mac下的virtualbox性能没有wmware好. 但是又想使用vagrant控制虚拟机. 于是就有了这篇文章.vagrant结合virtualbox使用是免费的, 但是vagrant结合wmware要收费, 并且要使用插件, 这个插件要收费$79美元.可以使用mech替代, mech是用python写的, 直接用pip就能安装, mech可以用在linux, windows, macos上.mech使用的命令类似vagrant, 可以直接使用vagrant格式的wmware box镜像 参考文章: Mech: Vagrant with VMWare Integration for free mech官方源码地址","text":"环境说明:macOS 10.14 下VMWare Fusion Pro 11和客户机CentOS7 —2019年更新，virtualbox发布6.x版性能及界面都令我很满意，wmware没太大优势，没必要用wmware了（mech当初用了一周就不用了） 个人觉得mac下的virtualbox性能没有wmware好. 但是又想使用vagrant控制虚拟机. 于是就有了这篇文章.vagrant结合virtualbox使用是免费的, 但是vagrant结合wmware要收费, 并且要使用插件, 这个插件要收费$79美元.可以使用mech替代, mech是用python写的, 直接用pip就能安装, mech可以用在linux, windows, macos上.mech使用的命令类似vagrant, 可以直接使用vagrant格式的wmware box镜像 参考文章: Mech: Vagrant with VMWare Integration for free mech官方源码地址 安装mechpip3 install mech mech版本下载box: mech init centos/7 mech up mech ssh 镜像可以用vagrant的, 各种linux发行版镜像列表可以找这里box list, 把关键字vagrant 换为mech即可使用该镜像 上述初始化可以改为以下, 但我尝试加了--name参数报错 mech init centos/7 --name=虚拟机名 BUG1–不能共享启动后报错不能共享文件夹(默认已安装vmware tools) ERROR: Error: There was an error mounting the Shared Folders file system inside the guest operating system 此处参考文章:解决vmware 里centos7与windows共享目录报 mount: unknown filesystem type ‘vmhgfs’ 在客户机里查看当前设置的共享目录: vmware-hgfsclient 先创建要共享的目录并修改归属用户(这句看当前用户名 echo ${USER}) sudo mkdir /mnt/hgfs sudo chown vagrant.vagrant /mnt/hgfs 在vmware客户机(centos)里执行挂载文件夹命令: /usr/bin/vmhgfs-fuse .host:/ /mnt/hgfs -o subtype=vmhgfs-fuse,allow_other 报错: fusermount: option allow_other only allowed if &#39;user_allow_other&#39; is set in /etc/fuse.conf 修改/etc/fuse.conf文件取消注释再试, sudo vi /etc/fuse.conf取消或者新增一行user_allow_other 在vmware客户机里挂载文件夹命令设置开机执行 sudo vi /etc/rc.d/rc.local /usr/bin/vmhgfs-fuse .host:/ /mnt/hgfs -o subtype=vmhgfs-fuse,allow_other 保存, 增加执行权限 sudo chmod +x /etc/rc.d/rc.local 再开mech, 启动后还是报错, 说不能共享文件夹, 但是这时已经可以在客户机看到共享的文件了, 修改文件会实时双向同步我这里是把上面的/mnt/hgfs目录设置为/www, 默认会把虚拟机项目所在的文件夹共享到共享目录下的mech文件夹, 例如我这里客户机里的共享文件夹是/www/mech 共享文件夹结果 提示: mech启动后, 可以通过mech ssh-config查看私钥文件的位置, 然后就可以用其他工具远程连接了 BUG2–启动mech报错如果启动mech时报错, 尝试关闭vmware的窗口再试 long@longdeMacBook-Pro  ~/vbox_projects/vm  mech up Bringing machine up... ERROR: Error: A file access error occurred on the host or guest operating system VM not started 注: mech相对vagrant多bug, 目前发现不能mech box remove box名命令移除已添加的box镜像, 但是我通过find命令找到了对应文件的目录,删除~/.mech/boxes目录下的对应文件夹即可移除box镜像, mech box list命令可以看到目前存在的box 其它的共享方案使用sshfs挂载远程服务器的文件, 映射到本地磁盘 windows下sshfs解决方案:Dokan+SSHFS 文件系统共享心得，代替 Samba 的理想之选如果在windows下用vagrant配合virtualbox虚拟linux, 共享的目录不能修改权限, 都是777. 建议使用sshfs方法替代默认的共享文件夹方法 linux下sshfs解决方案:linux版SSHFS安装使用方法 mac下sshfs解决方案:Mac 安装 sshfs","categories":[],"tags":[{"name":"mech","slug":"mech","permalink":"https://zeroto.one/tags/mech/"},{"name":"wmware","slug":"wmware","permalink":"https://zeroto.one/tags/wmware/"}]},{"title":"windows和linux 配置python虚拟环境","slug":"win_linux_python_virtualenv","date":"2018-10-20T16:02:30.000Z","updated":"2019-09-17T18:22:27.856Z","comments":true,"path":"2018/10/20/win_linux_python_virtualenv/","link":"","permalink":"https://zeroto.one/2018/10/20/win_linux_python_virtualenv/","excerpt":"安装虚拟环境这里的代码都是在centos7和windows10下测试先安装python pip virtualenv virtualenvwrapper","text":"安装虚拟环境这里的代码都是在centos7和windows10下测试先安装python pip virtualenv virtualenvwrapper windows版本:python3 -m pip install virtualenv python3 -m pip install virtualenvwrapper-win 然后设置用户环境变量, 例如: WORKON_HOME C:\\Users\\long\\Envs win环境变量.PNG linux版本:python3 -m pip install virtualenv python3 -m pip install virtualenvwrapper 设置用户环境变量, 例如:vim ~/.bash_profile在最后添加: export WORKON_HOME=$HOME/.virtualenvs VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3 source /usr/bin/virtualenvwrapper.sh 如果对应python目录不同可以搜索一下: which python3 which python sudo find / -name &quot;virtualenvwrapper.sh&quot; 可能还要设置为以下:sudo vim /etc/profile export WORKON_HOME=$HOME/.virtualenvs VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3 alias py=&quot;python&quot; source /usr/bin/virtualenvwrapper.sh 创建虚拟环境: 提示：如果不指定python版本，默认安装的是python2的虚拟环境 在python2中，创建虚拟环境mkvirtualenv 虚拟环境名称 例 ：mkvirtualenv py_flask 在python3中，创建虚拟环境mkvirtualenv -p python3 虚拟环境名称 例 ：mkvirtualenv -p python3 py3_flask 如果创建的虚拟环境带有原来的pip包, 创建虚拟环境的时候加入这个参数 –no-site-packages 使用虚拟环境 widows下:打开cmd (power shell不行) 输入workon回车 看到已创建的虚拟环境workon 虚拟环境名 linux环境下:输入workon然后按两次tab键就能查看已有环境workon 虚拟环境名 退出虚拟环境deactivate 删除虚拟环境的命令 :rmvirtualenv 虚拟环境名称 例 ：删除虚拟环境py3_flask 先退出：deactivate 再删除：rmvirtualenv py3_flask 查看虚拟环境中安装的包 :pip freeze","categories":[],"tags":[{"name":"virtualenv","slug":"virtualenv","permalink":"https://zeroto.one/tags/virtualenv/"}]},{"title":"谷歌云平台一周年纪念","slug":"gcp_notes","date":"2018-10-19T05:15:05.000Z","updated":"2019-09-17T18:22:27.856Z","comments":true,"path":"2018/10/19/gcp_notes/","link":"","permalink":"https://zeroto.one/2018/10/19/gcp_notes/","excerpt":"谷歌云一周年纪念 谷歌云(Google Cloud Platform)简称GCP , 用了差不多一年台湾节点, ping值在100ms内, 带宽高, 速度快, 就是流量费贵, 开了最小配置的实例, 一年用了大概110美元.下个月就要过期了.","text":"谷歌云一周年纪念 谷歌云(Google Cloud Platform)简称GCP , 用了差不多一年台湾节点, ping值在100ms内, 带宽高, 速度快, 就是流量费贵, 开了最小配置的实例, 一年用了大概110美元.下个月就要过期了. 谷歌云 已转到 微软Azure, 继续用一年 azure azure2 之前都是用 s$ r 服务, 现在更换服务器就更换工具为 v2和谐ray 服务科学#@上#网, 查询显示服务器ip地址是香港的: azure_v2 注: 微软面向学生推出Azure for Students免费用计划, $100 额度, 无需信用卡验证, 有edu邮箱即可","categories":[],"tags":[{"name":"vps","slug":"vps","permalink":"https://zeroto.one/tags/vps/"}]},{"title":"Linux X11 远程图形显示","slug":"Linux_X11_config","date":"2018-08-13T10:15:29.000Z","updated":"2019-09-17T18:22:27.856Z","comments":true,"path":"2018/08/13/Linux_X11_config/","link":"","permalink":"https://zeroto.one/2018/08/13/Linux_X11_config/","excerpt":"需求：服务器没有完整的桌面环境, 而某些软件需要图形界面观察效果。维基介绍：X窗口系统（X Window System，也常称为X11或X）是一种以位图方式显示的软件窗口系统环境说明：windows10下显示图形界面, 远程服务器为centos7， windows下远程软件为MobaXterm 或vcxsrv+xshell 或 vcxsrv+pycharm (vcxsrv可以使用Xming代替)附带安装chromium浏览器和字体方法","text":"需求：服务器没有完整的桌面环境, 而某些软件需要图形界面观察效果。维基介绍：X窗口系统（X Window System，也常称为X11或X）是一种以位图方式显示的软件窗口系统环境说明：windows10下显示图形界面, 远程服务器为centos7， windows下远程软件为MobaXterm 或vcxsrv+xshell 或 vcxsrv+pycharm (vcxsrv可以使用Xming代替)附带安装chromium浏览器和字体方法 准备工作安装 X11 转发相关软件 sudo yum install xorg-x11-xauth xorg-x11-fonts-* xorg-x11-font-utils xorg-x11-fonts-Type1 xclock 启用 X11 Forwarding sudo vim /etc/ssh/sshd_config, 更改为如下: (只修改 X11UseLocalhost 和 X11Forwarding ) X11Forwarding yes #X11DisplayOffset 10 #X11UseLocalhost yes X11UseLocalhost no 重启 sshd 服务 sudo systemctl restart sshd.service 查看当前显示变量 echo $DISPLAY 我这里是连接远程服务器(私网在外层映射到公网), 显示的结果如下, ip与ifconfig里eth0网卡的一样. 10.140.0.2:10.0 DISPLAY设置 方案一(MobaXterm)MobaXterm一个软件一步到位, 集成x11服务端, linux上的为x11客户端未用过x11的可以先下载MobaXterm便携版用来测试mobaxterm官网MobaXterm便携版10.9下载地址[MobaXterm安装版10.9下载地址]如果服务器设置正确，X11-forwarding和DISPLAY会有绿色勾，如下图： MobaXterm 方案二(vcxsrv &amp; xshell)vcxsrv和xshell配合显示图形界面, vcxsrv作为x11服务端, xshell中转图形数据到vcxsrvVcXsrv Windows X Server下载地址 windows端下载安装vcxsrv第一次运行vcxsrv时使用开始菜单里面的XLaunch来启动, 产生一个初始的配置文件. 对于简单的使用来说, 不需要任何特殊的配置, 一切使用默认即可. 需要记住的是下图中标示出的”Display number”中的数字, 此处使用默认的, 最后一步中的Save configuration可以把这个设置保存为一个文件, 以后每次用这个设置只需运行该文件, 而不用每次都重新配置 xshell里点文件–&gt;属性–&gt;ssh隧道–&gt;x11转移–&gt;X DISPLAY–&gt;设置为如下(默认的localhost:0.0也可): 127.0.0.1:0.0 xshell设置 方案三(vcxsrv &amp; pycharm)vcxsrv和pycharm配合显示图形界面, vcxsrv作为x11服务端, pycharm中转图形数据到vcxsrv 方法一(麻烦,精确控制)Pycharm-&gt;Preferences-&gt;Build, Execution, Deployment-&gt;Console-&gt;Python Console，点击Environment variables后面的…，添加我们刚刚看到的DISPLAY变量 在run configuration里面还要设置一遍：点击运行按钮左边的下拉三角形-&gt;edit configurations ;选中我们运行的configuration，我这里是test，点右边的Environment variables的…添加一个DISPLAY变量，我这里是localhost:10.0 方法二(最方便)在linux的全局变量里 /etc/bashrc或者~/.bashrc设置以下就不用在pycharm每个文件run configuration里设置一遍(pycharm里就不用执行上述步骤设置环境变量了) export DISPLAY=127.0.0.1:10.0 测试显示以下会显示图形数字时钟，如果设置正确： xclock xclock 安装字体如果使用浏览器等用到字体的软件会显示乱码, 解决办法, 安装英文与中文字体:sudo yum -y install dejavu-sans-mono-fonts wqy-zenhei-fonts 如果需要微软雅黑字体或其它指定字体, 请参考以下文章:Linux CentOS 7 安装字体库 &amp; 中文字体 更新字体缓存命令，不输入也可： fc-cache -fv 安装chromium浏览器(epel源里没有chrome但有chromium) 安装epel源: sudo yum install epel-release 正式安装chromium和chromedriver，chromedriver为selenium要用到的, 不需要可以不装. sudo yum -y install chromium chromedriver 启动chromium浏览器的命令为chromium-browser建议设置alias输入命令验证chromedriver安装版本chromedriver此处Chromium版本为 57, ChromeDriver版本为 2.37 chromium 浏览器很耗费内存资源, 512m内存服务器会很卡. x11转发方式效率不高, 即使是在局域网内使用也是有卡顿感, 如果是长期大量使用桌面环境可以考虑使用vnc方式代替.","categories":[],"tags":[{"name":"X11","slug":"X11","permalink":"https://zeroto.one/tags/X11/"},{"name":"chromium","slug":"chromium","permalink":"https://zeroto.one/tags/chromium/"},{"name":"vcxsrv","slug":"vcxsrv","permalink":"https://zeroto.one/tags/vcxsrv/"}]},{"title":"linux和windows双系统引导设置","slug":"linux_and_windows_boot_setting","date":"2018-08-11T23:15:34.000Z","updated":"2019-09-17T18:22:27.856Z","comments":true,"path":"2018/08/11/linux_and_windows_boot_setting/","link":"","permalink":"https://zeroto.one/2018/08/11/linux_and_windows_boot_setting/","excerpt":"环境说明:windows 10 和 manjaro linux 17.1.11 双系统，磁盘分区格式为mbr，先装的windows后装的linux，装linux的时候把启动文件选择在/ 根分区 , 使用以下方法后，两个系统都有选项可以进入windows和linux，我选了windows的启动管理作为默认启动菜单，windows作为主力机。","text":"环境说明:windows 10 和 manjaro linux 17.1.11 双系统，磁盘分区格式为mbr，先装的windows后装的linux，装linux的时候把启动文件选择在/ 根分区 , 使用以下方法后，两个系统都有选项可以进入windows和linux，我选了windows的启动管理作为默认启动菜单，windows作为主力机。 linux修改启动等待时间修改配置文件 sudo vim /etc/default/grub 修改以下内容(通常在第3行)：GRUB_TIMEOUT=5 后面的5即是设置的等待时间(秒)，修改为相应的值即可 执行以下命令使配置生效：sudo update-grub windows修复启动项先装的windows后装的linux，这样在windows的启动菜单里没有linux的启动项，需要自己添加 windows下启动修复软件EasyBCDEasyBCD下载选择右边的—Non-commercial点击register然后不用输入邮箱直接点击download 打开easybcd 编辑启动项选择–&gt;编辑引导菜单—&gt;如果是windows10把use metro bootloader 去掉勾选，设置相应的秒数和默认系统–&gt;最后点击（保存设置） 新增启动项选择–&gt;添加新条目–&gt;linux/bsb–&gt;类型选–&gt;freebsd/pc-bsd–&gt;名称随便写–&gt;驱动器选择安装linux的分区–&gt;然后点击（添加条目） 添加启动项 另外:pe下可以用ntbootautofix修复windows系统启动故障问题 双系统时间设置双系统情况下，默认设置会导致时间错乱(大约+/-8小时)，在linux下输入以下命令即可: sudo timedatectl set-local-rtc 1 如果上述命令不行，旧版备用命令timedatectl set-local-rtc 1 --adjust-system-clock 查看当前时区设置命令 timedatectl","categories":[],"tags":[{"name":"系统设置","slug":"系统设置","permalink":"https://zeroto.one/tags/系统设置/"}]},{"title":"centos7 安装配置mongodb 4.0","slug":"centos_install_mongodb","date":"2018-08-01T00:13:00.000Z","updated":"2019-09-17T18:22:27.856Z","comments":true,"path":"2018/08/01/centos_install_mongodb/","link":"","permalink":"https://zeroto.one/2018/08/01/centos_install_mongodb/","excerpt":"环境说明: centos7.5 安装mongodb 4.0的社区版安装后添加用户和配置权限","text":"环境说明: centos7.5 安装mongodb 4.0的社区版安装后添加用户和配置权限 一、准备工作关闭 SELinux部分CentOS 可能不存在selinux文件，可以跳过这步。 sudo vim /etc/sysconfig/selinux sudo yum install vim #如果 vim 指令未安装，那就安装它 找到 SELINUX 然后修改成 disabled. SELINUX = disabled 二、安装MongoDB1.添加 MongoDB yum 源sudo vim /etc/yum.repos.d/mongodb-org-4.0.repo 然后添加以下内容 [mongodb-org-4.0] name=MongoDB Repository baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/4.0/x86_64/ gpgcheck=1 enabled=1 gpgkey=https://www.mongodb.org/static/pgp/server-4.0.asc 2.安装mongodb:sudo yum install -y mongodb-org 可以指定MongoDB版本。然而，yum会在新版本可用时升级软件包。如果不想意外升级，可固定软件包，将以下exclude指令添加到/etc/yum.conf文件中： exclude=mongodb-org,mongodb-org-server,mongodb-org-shell,mongodb-org-mongos,mongodb-org-tools 添加mongodb开机启动 sudo systemctl enable mongod sudo systemctl start mongod sudo systemctl status mongod 三、设置1. 添加用户(1). 超级管理员账号创建 先登录sudo mongo 登录后，使用admin数据库(超级管理员账号必须创建在该数据库上)use admin创建超级用户 db.createUser({&quot;user&quot;:&quot;用户名&quot;,&quot;pwd&quot;:&quot;密码&quot;,&quot;roles&quot;:[&quot;root&quot;]}) (2). 普通用户账号创建 方式一: 在当前使用的数据库上创建普通用户选择需要创建用户的数据库，例如use test创建普通用户 db.createUser(&quot;user&quot;:&quot;user1&quot;, &quot;pwd&quot;:&quot;pwd1&quot;, roles:[&quot;read&quot;]) 创建普通用户user1,该用户在test上的权限是只读 db.createUser(&quot;user&quot;:&quot;user1&quot;, &quot;pwd&quot;:&quot;pwd1&quot;, roles:[&quot;readWrite&quot;]) 创建普通用户user1,该用户在test上的权限是读写 方式二: 在admin数据库上创建普通用户一次性赋予用户多个数据库的权限 use admin db.createUser({&quot;user&quot;:&quot;python1&quot;, &quot;pwd&quot;:&quot;python1&quot;, roles:[{&quot;role&quot;:&quot;read&quot;,&quot;db&quot;:&quot;dbname1&quot;},{&quot;role&quot;:&quot;readWrite&quot;,&quot;db&quot;:&quot;dbname2&quot;} ]}) (3). 查看创建的用户show users (4). 删除用户先use该数据库然后: db.dropUser(&#39;用户名&#39;) 2. 关闭巨型页安装完成后，为了消除 MongoDB 的性能警告，需要关闭 Linux 巨型页(4.0版本开启权限认证后没有该提示)：Linux 巨型页的介绍: 伙伴系统之避免碎片 $ echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled $ echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag 3. 打开 MongoDB 权限认证先添加了用户再设置开启权限权限问题:从 MONGODB “赎金事件” 看安全问题 (1). MongoDB 4.0版本权限设置:执行 sudo vim /etc/mongod.conf，找到 security: 这一行，取消注释并改为： security: authorization: enabled 然后重启 MongoDB sudo systemctl restart mongod (2). MongoDB旧版3.x 权限设置:两种方式，一种是mongodb启动时加入–auth参数，另一种是修改配置文件。在配置文件（默认是/etc/mongodb.conf或mongo.conf或mongod.conf）最后加入 auth=true 然后重启MongoDB (3). 打开权限认证后的登录方法未认证没有操作权限方式一:使用auth方法认证，例如： &gt; use admin switched to db admin &gt; db.auth(&#39;用户名&#39;, &#39;密码&#39;) 1 创建在admin数据库上的用户，必须来到admin数据库上进行认证。返回1表示认证通过，返回0表示认证失败。 其它用户进入其它数据库也是执行auth方法: db.auth(‘用户名’, ‘密码’) 方式二:在登录mongo客户端时指定用户名和密码，如下： mongo -u 用户名 -p 密码 --authenticationDatabase 数据库名 四、常用命令# 查看mongo安装位置 whereis mongod # 查看修改配置文件 sudo vim /etc/mongod.conf # 启动mongodb sudo systemctl start mongod.service # 或者 sudo service mongod start # 重新启动mongodb sudo systemctl restart mongod.service # 或者 sudo service mongod restart # 停止mongodb sudo systemctl stop mongod.service # 或者 sudo service mongod stop # 查看mongodb的状态 systemctl status mongod.service # 或者 service mongod status # mongo登录 sudo mongo # 查看数据库 show dbs 参考资料来源: mongodb官方教程NodeBB 文档 CentOS &amp; MongoDB 安装第三方教程 CentOS 7 安装 MongoDB 3.6","categories":[],"tags":[{"name":"mongodb","slug":"mongodb","permalink":"https://zeroto.one/tags/mongodb/"}]},{"title":"Vagrant 解决Bug记录","slug":"Vagrant_debug","date":"2018-07-30T04:03:00.000Z","updated":"2019-09-17T18:22:27.856Z","comments":true,"path":"2018/07/30/Vagrant_debug/","link":"","permalink":"https://zeroto.one/2018/07/30/Vagrant_debug/","excerpt":"环境: 主机windows10下virtualbox和Vagrant软件，客户机centos7","text":"环境: 主机windows10下virtualbox和Vagrant软件，客户机centos7 BUG1:vagrant up 时每次都要手动输入网卡序号才能继续# ==&gt; default: Available bridged network interfaces: # 1) Qualcomm Atheros AR8151 PCI-E Gigabit Ethernet Controller (NDIS 6.30) # 2) Hyper-V Virtual Ethernet Adapter which interface should the network bridge to ? 解决方法:方法一: 禁用其中之一的网卡，或者方法二: 在配置文件里加入bridge: “对应网卡名”例如以下 config.vm.network &quot;public_network&quot;, bridge: &quot;Qualcomm Atheros AR8151 PCI-E Gigabit Ethernet Controller (NDIS 6.30)&quot; BUG2:共享目录文件无法即时同步：先启动，然后在客户端项目文件夹里输入 vagrant rsync-auto 即可从主机单向同步到客户机 BUG3:无法双向同步：是没有安装guest additions (需要cmd或bash命令行翻墙才能安装) 信息如下: ==&gt; default: Checking for guest additions in VM... default: No guest additions were detected on the base box for this VM! Guest default: additions are required for forwarded ports, shared folders, host only default: networking, and more. If SSH fails on this machine, please install default: the guest additions and repackage the box to continue. default: default: This is not an error message; everything may continue to work properly, default: in which case you may ignore this message. ==&gt; default: Setting hostname... ==&gt; default: Configuring and enabling network interfaces... default: SSH address: 127.0.0.1:2222 default: SSH username: vagrant default: SSH auth method: private key ==&gt; default: Rsyncing folder: /cygdrive/d/vbox_os_project/centos7_box/ =&gt; /vagrant ==&gt; default: Machine already provisioned. Run `vagrant provision` or use the `--provision` ==&gt; default: flag to force provisioning. Provisioners marked to run always will still run. 安装插件参考链接：https://www.jianshu.com/p/e28b79afc2f5vagrant plugin install vagrant-vbguest Vagrantfile 配置共享目录，挂载位置不能使用 /vagrantVagrant.configure(&quot;2&quot;) do |config| config.vm.synced_folder &quot;.&quot;, &quot;/share&quot; end 启动过程会自动联网安装 Virtualbox Guest Additions，并在客户机上安装必要的依赖包，启动后配置的共享目录可以双向读写 每次启动虚机都会检查vbguest插件的更新，如果不想更新，修改Vgrantfilew文件，加上这样一条： config.vbguest.auto_update = false 禁用默认的/vagrant共享目录config.vm.synced_folder &quot;.&quot;,&quot;/vagrant&quot;,disabled:true 注:我这边测试没新建非默认同步目录的话，不能双向同步（建完同步目录，最好禁用默认/vagrant共享目录） 方法二:使用GoodSync实现文件双向实时同步(收费软件)https://blog.qxzzf.com/archives/235/","categories":[],"tags":[{"name":"vagrant","slug":"vagrant","permalink":"https://zeroto.one/tags/vagrant/"}]},{"title":"CentOS 7 安装配置Docker CE","slug":"CentOS7_Install_Docker","date":"2018-07-17T00:03:00.000Z","updated":"2019-09-17T18:22:27.856Z","comments":true,"path":"2018/07/17/CentOS7_Install_Docker/","link":"","permalink":"https://zeroto.one/2018/07/17/CentOS7_Install_Docker/","excerpt":"主要参考自官方教程:https://docs.docker.com/install/linux/docker-ce/centos/#install-using-the-repository","text":"主要参考自官方教程:https://docs.docker.com/install/linux/docker-ce/centos/#install-using-the-repository 一. 设置YUM库从YUM源安装: 1. 安装依赖包sudo yum install -y yum-utils \\ device-mapper-persistent-data \\ lvm2 2. 设置使用稳定版docker源:sudo yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo 二. 安装Docker CE1. 安装最新版sudo yum install docker-ce 之后如果提示 GPG key 信息为以下证明是官方的, 按y回车确认 060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35 2. 安装指定版a. 列出有哪些版本 yum list docker-ce --showduplicates | sort -r b. 根据上面列出的版本安装指定版本，版本示例：docker-ce-18.03.0.ce sudo yum install docker-ce-&lt;VERSION STRING&gt; 三. 启动Docker CE1. centos 7 启动Docker并设置linux开机自动启动Dockersudo systemctl start docker sudo systemctl enable docker 相关命令:停止stop 重启restart 状态status 开机自启enable 取消开机自启disable 2. 运行hello-world镜像测试(可跳过这步)sudo docker run hello-world 3. 设置容器自动运行为了使docker里的容器在docker启动的时候自动启动，可以使用以下命令。如果启动失败，Docker将尝试一直重启容器。 创建容器 sudo docker run --restart=always 镜像名 如果创建容器时未指定 –restart=always sudo docker update --restart=always 容器名 备用参数: --restart=on-failure:10 Docker将尝试重新启动容器的最多10次 为了避免每次命令都输入sudo，可以设置用户权限，注意执行后须注销重新登录 sudo usermod -a -G docker $USER","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"https://zeroto.one/tags/docker/"}]},{"title":"同步软件rsync安装配置","slug":"rsync","date":"2017-12-30T09:00:00.000Z","updated":"2019-09-17T18:22:27.856Z","comments":true,"path":"2017/12/30/rsync/","link":"","permalink":"https://zeroto.one/2017/12/30/rsync/","excerpt":"简介：rsync为一个同步软件。rsync的linux版名称rsync，windows版名称cwRsync。有服务器端和客户机端之分。服务器端需时刻启动相关服务，以等待客户端的同步命令。如果要定时同步windows下文件到linux下（拉取方式）。可只安装windows服务器端，linux客户端，linux客户端设置定时任务。","text":"简介：rsync为一个同步软件。rsync的linux版名称rsync，windows版名称cwRsync。有服务器端和客户机端之分。服务器端需时刻启动相关服务，以等待客户端的同步命令。如果要定时同步windows下文件到linux下（拉取方式）。可只安装windows服务器端，linux客户端，linux客户端设置定时任务。 一、windows下安装rsync服务器端⑴安装cwRsync下载cwRsyncServer_4.1.0_Installer.execwRsyncServer下载完毕后，进行安装即可。其中有一点需要注意，就是在安装的过程中，会提示要输入cwRsyncServer在系统中新建用户的用户名及密码（能用该账户登录系统），也可以输入已有用户的用户名和密码。 如果想要随时使用相关命令，可把目前cwRsync所在的bin路径加入到系统的环境变量中。（我的电脑–右键属性–高级系统设置–环境变量–系统变量）找到path，点击编辑在最后面加上路径,例如 ;C:\\ICW\\bin ⑵修改配置文件windows下rsync服务器端配置文件 uid = 0 gid = 0 use chroot = false strict modes = false log file = rsyncd.log [backup] path = /cygdrive/c/web/ ignore errors read only = yes list = no hosts allow = 192.168.213.0/255.255.255.0 auth users = synctest secrets file = /cygdrive/c/ICW/rsyncd.password 配置解析上述配置文件/cygdrive/c代表c:/ 其余设定跟linux下一样。开关选项使用（yes/no)。上述[backup]为模块名，配置文件可以写入多个模块。auth users 为同步时输入的用户，只与密码文件(secrets file)里设置的用户有关，与系统用户无关。path后接要同步的目录，hosts allow后修改为对应允许同步的主机或ip段，设为 * 表示允许所有主机。read only为只读模式，如果想同步目录可写，请设为no。 配置文件rsyncd.conf修改完毕后，我们来创建backup模块的同步文件夹，上述配置文件是设为c:/web/ 注意：同步文件夹创建完毕后，一定要把我们在前面安装rsyncserver时创建的用户，对该文件夹具有完全所有权。选择该文件夹–右键属性–安全–选中该用户–勾选完全控制。 同步文件夹创建完毕后，再创建同步时的密码文件,上述配置文件中密码文件是放在c:/ICW/rsyncd.password。内容如下：用户名:密码 例如 synctest:password 注意：该文件创建完毕后，一定要使用chmod命令修改其权限。这个和Linux系统上是一样的。chmod命令在rsyncserver的bin目录下，我们可以直接使用（下面为用户SvcCWRSYNC ） chmod 600 /cygdrive/c/ICW/rsyncd.password chown SvcCWRSYNC /cygdrive/c/ICW/rsyncd.password 以上全部修改并配置完毕后，就可以在windows的服务（计算机–管理–服务）中看到rsync服务（RsyncServer)。把该服务设置为自动启动，并启动该服务。 手动启动命令 , 在cmd里输入以下行，（–config后接配置文件）例：rsync --daemon --ipv4 --config=/cygdrive/c/ICW/rsyncd.conf 此后不用手动启动即可正常使用rsync服务端。 ⑶测试现在在另一台机器上检查是否可以正常连接（有装telnet的机器即可）telnet IP地址 端口号，命令如下telnet 192.168.213.133 873看到如下说明可以连接@RSYNCD: 30.0 二、linux下安装rsync⑴安装rsynclinux下服务器端与客户端是同一个软件yum -y install rsync安装结束后，我们可以查看下rsync命令所在的目录以及rsync的帮助。如下：which rsync默认安装在/usr/bin/rsyncrsync --help //查看帮助文档 ⑵linux下客户端配置客户端只需要配置一个密码文件即可。该密码文件中的密码要与rsync服务器上的密码文件中的密码对应，并且也要与rsync服务器rsyncd.conf配置文件中的认证模块中的用户匹配。vi /etc/rsyncd.password添加如下行，例密码test：test密码文件中，只需要写入密码即可，不需要用户名。（服务器端密码文件需要写入 用户名:密码）密码文件创建完毕后，要把其权限设置为600，否则会在以后同步时提示验证出错。执行以下：chmod 600 /etc/rsyncd.password ⑶linux下服务器端配置如不使用linux下rsync服务器端，请跳过①设为开机启动在centos下rsync默认以xinetd方式运行rsync服务。所以RPM方式安装rsync的话，我们只需启动xinet服务即可。vi /etc/xinetd.d/rsync修改为以下行，保存退出 disable = no flags = IPv4 server_args = --daemon --/etc/rsyncd.conf 如无法使用ipv6则上述一定要设为IPv4方式，否则会出错 配置完毕后，我们还需要安装xinetd软件包，否则无法启动xinetd服务。如下：yum -y install xinetd服务器端启动命令/etc/init.d/xinetd start关闭rsync服务/etc/init.d/xinetd stop设为开机启动chkconfig xinetd on查看端口是否开启，是使用ipv6方式还是ipv4方式netstat -tunlp |grep :873 ②linux下rsync服务器端配置文件服务器端需要启动服务，才能随时以daemon认证方式同步文件。客户端可以接收文件时才启动。 1、修改rsync配置文件 vi /etc/rsyncd.confLinux服务端实际配置文件如下 uid = root gid = root user chroot = no max connections = 200 timeout = 600 pid file = /var/run/rsyncd.pid lock file = /var/run/rsyncd.lock log file = /var/run/rsyncd.log [backup] path = /home/rsync/ ignore errors read only = no list = no hosts allow = 192.168.213.0/255.255.255.0 auth users = test secrets file = /etc/rsyncd.password 配置解释：开关选项使用（yes/no)。上述[backup]为模块名，auth users 为同步时输入的用户，path后接要同步的目录，hosts allow后修改为对应允许同步的主机或IP段，read only为只读模式。 2、修改rsync用户与对应密码文件 vi /etc/rsyncd.password添加如下行：test:test上述为用户test,密码test(用户在前面) 密码文件创建完毕后，要把其权限设置为600，否则会在以后同步时提示验证出错。执行以下：chmod 600 /etc/rsyncd.password 注意：该密码文件中的用户和密码可以进行自定义，同时该用户不一定要在服务器中的系统用户存在。一个rsync配置文件中可以包含多个认证模块，同时一个密码文件中也可以存放多个用户和其对应的密码。其中每一个认证模块可以对应不同的客户端。 如果重启出现以下failed to create pid file /var/run/rsyncd.pid: File exists删除相关的pid文件rm -rf /var/run/rsyncd.pid 三、系统相关设定 1.防火墙放行 iptables -I INPUT -p tcp --dport 873 -j ACCEPT 2.创建相关同步目录，例：mkdir /home/rsync/ 3.查看端口是否开启 netstat -ntulpdaemon方式默认端口为873 SSH方式默认端口为22 四、rsync同步命令注：如果是windows系统/cygdrive/c代表c:/其余一样。如要设为定时同步crontab -e然后加入以下同步的命令。例加入0 1 * * * date为每天1时0分执行date命令。以下同步命令原则是来源目录在前面，目标目录在后面。 ⑴本机文件同步同步本地文件，从一个目录同步到另外一个目录。如：rsync -avz /data /backup，表示把本地/data目录下的文件同步到本地/backup目录下。 ⑵daemon方式远程同步此为常用方式，默认端口873如果在WINDOWS同步时提示密码文件无法存取，但是使用手动输入密码可以同步。请把引用密码文件的命令格式改为&lt;c:\\icw\\rsyncd.password原来的格式为--password-file=/cygdrive/c/icw/rsyncd.password ①推送文件（从客户端推送文件到服务器端）rsync -avz /home/www/* test@192.168.213.146::backup --password-file=/etc/rsyncd.password 上述为把本地/home/www/目录下所有文件推送到192.168.213.146服务器上，用户为test(服务器端配置文件auth users=后的字符和密码文件里的用户) ::后为模块名backup ②拉取文件（从客户端主动拉取服务器端文件）rsync -avz test@192.168.213.146::backup --password-file=/etc/rsyncd.password /home/www/ 上述为把192.168.213.146服务器上backup模块预先设定好的目录，同步到本地/home/www/目录下。用户为test(服务器端配置文件auth users=后的字符和密码文件里的用户) ::后为模块名backup ⑶非daemon方式远程同步此方式不使用配置文件的模块，使用系统里有的用户账号和密码，请先确认服务端是否开启相关端口，默认22 ①推送方式：使用一个远程shell程序(如rsh、ssh)来实现把本地的文件同步到远程机器上。如：rsync -avz /data test@192.168.213.146:/backup，表示把本地/data目录下的文件同步到服务器192.168.213.146的/backup目录下。 ②拉取方式：把远程机器的文件同步到本地。如：rsync -avz test@192.168.213.146:/backup /data，表示把192.168.213.146的/backup目录下文件同步到本地/data目录下。","categories":[],"tags":[{"name":"rsync","slug":"rsync","permalink":"https://zeroto.one/tags/rsync/"},{"name":"同步软件","slug":"同步软件","permalink":"https://zeroto.one/tags/同步软件/"}]},{"title":"批处理关闭或开启NETBIOS","slug":"cmd-off-netbios","date":"2017-12-24T03:58:00.000Z","updated":"2019-09-17T18:22:27.856Z","comments":true,"path":"2017/12/24/cmd-off-netbios/","link":"","permalink":"https://zeroto.one/2017/12/24/cmd-off-netbios/","excerpt":"禁用NETBIOS后，局域网内计算机不可以在地址栏用主机名访问你的主机，更安全。 以下为批处理自动关闭netbios脚本:","text":"禁用NETBIOS后，局域网内计算机不可以在地址栏用主机名访问你的主机，更安全。 以下为批处理自动关闭netbios脚本: @echo off rem off_netbios_Self_Del for /L %%a in (1,1,20) do ( wmic nicconfig where index=&#39;%%a&#39; call settcpipnetbios 2 ) cd /d %~dp0 if exist one_time.cmd ( del /f /q %0 exit ) rename %0 one_time.cmd exit 功能:一键关闭netbios，执行完第二次后自己删除自己。 适用性:，在win7及win2008测试通过，其它系统没测。 说明:用法：复制上述脚本随便起个名，扩展名改为bat或者cmd。最好把文件放到开机启动目录，开机就运行。windows下自启动目录如下：C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup 如何开启NETBIOS?把上述代码第四行最后数字改为1即为开启，改为0即为默认设置，为2时代表关闭（上述代码已默认设为关闭NETBIOS)。 为何要第二次才删除？如果是新装或者复制了系统，第一次开机是检测并安装网卡设备。如果未安装完网卡就运行完脚本，那脚本就发挥不了作用。 运行流程：在运行第一次的时候会自动把本脚本重命名为one_time.cmd在第二次运行脚本监测到有one_time.cmd文件后会自我删除。本脚本用for循环20次，每个网卡都尝试关闭NETBIOS,（一般系统有十多个网卡序号）如果不够（不放心）就就把第三行代码由数字20改为30或更多。如果想要查看自己的网卡序号可以在CMD里输入以下命令：wmic nicconfig Get Caption,index 参考文档:批处理如何恢复Netbios","categories":[],"tags":[{"name":"bat","slug":"bat","permalink":"https://zeroto.one/tags/bat/"},{"name":"批处理","slug":"批处理","permalink":"https://zeroto.one/tags/批处理/"}]},{"title":"Hexo主题indigo添加来必力评论","slug":"Hexo主题indigo添加来必力评论","date":"2017-09-25T14:00:00.000Z","updated":"2019-09-17T18:22:27.856Z","comments":true,"path":"2017/09/25/Hexo主题indigo添加来必力评论/","link":"","permalink":"https://zeroto.one/2017/09/25/Hexo主题indigo添加来必力评论/","excerpt":"indigo现有两个主题分支，本博客用的是card分支 默认hexo-theme-indigo-card的1.6.14版是没有内置来必力评论的。网上也搜不到相关教程，只好自己增加了。","text":"indigo现有两个主题分支，本博客用的是card分支 默认hexo-theme-indigo-card的1.6.14版是没有内置来必力评论的。网上也搜不到相关教程，只好自己增加了。 在themes\\hexo-theme-indigo-card\\layout\\_partial\\post目录里，修改comment.ejs文件 添加以下句 &lt;%- partial(&#39;../plugins/livere&#39;) %&gt; 在themes\\hexo-theme-indigo-card\\layout\\_partial\\plugins目录里，新建livere.ejs文件，内容如下 &lt;% if (theme.livere_uid){ %&gt; &lt;section class=&quot;comments&quot; id=&quot;comments&quot;&gt; &lt;div id=&quot;lv-container&quot; data-id=&quot;city&quot; data-uid=&quot;你的来必力ID&quot;&gt; &lt;script type=&quot;text/javascript&quot;&gt; (function(d, s) { var j, e = d.getElementsByTagName(s)[0]; if (typeof LivereTower === &#39;function&#39;) { return; } j = d.createElement(s); j.src = &#39;https://cdn-city.livere.com/js/embed.dist.js&#39;; j.async = true; e.parentNode.insertBefore(j, e); })(document, &#39;script&#39;); &lt;/script&gt; &lt;noscript&gt;为正常使用来必力评论功能请激活JavaScript&lt;/noscript&gt; &lt;/div&gt; &lt;/section&gt; &lt;% } %&gt; 在主题配置文件themes\\hexo-theme-indigo-card\\_config.yml里，搜索uyan_uid，在其下一行添加 livere_uid: 你的来必力ID 注意：上述两个文件请替换为注册时给的“来必力ID”。 保存所有修改的文件，完成。","categories":[],"tags":[{"name":"hexo主题","slug":"hexo主题","permalink":"https://zeroto.one/tags/hexo主题/"},{"name":"来必力","slug":"来必力","permalink":"https://zeroto.one/tags/来必力/"}]},{"title":"Hello World初始博客页面","slug":"hello-world","date":"2017-09-22T16:00:00.000Z","updated":"2019-09-17T18:22:27.856Z","comments":true,"path":"2017/09/22/hello-world/","link":"","permalink":"https://zeroto.one/2017/09/22/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment 测试代码高亮 #!/bin/bash ###### CONFIG ACCEPTED_HOSTS=&quot;/root/.hag_accepted.conf&quot; BE_VERBOSE=false if [ &quot;$UID&quot; -ne 0 ] then echo &quot;Superuser rights required&quot; exit 2 fi genApacheConf(){ echo -e &quot;# Host ${HOME_DIR}$1/$2 :&quot; }","categories":[],"tags":[{"name":"测试","slug":"测试","permalink":"https://zeroto.one/tags/测试/"}]}]}